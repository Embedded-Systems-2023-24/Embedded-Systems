// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="compute_matrices_compute_matrices,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.300000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=34,HLS_SYN_DSP=0,HLS_SYN_FF=4026,HLS_SYN_LUT=6423,HLS_VERSION=2020_2}" *)

module compute_matrices (
        ap_clk,
        ap_rst_n,
        m_axi_gmem1_AWVALID,
        m_axi_gmem1_AWREADY,
        m_axi_gmem1_AWADDR,
        m_axi_gmem1_AWID,
        m_axi_gmem1_AWLEN,
        m_axi_gmem1_AWSIZE,
        m_axi_gmem1_AWBURST,
        m_axi_gmem1_AWLOCK,
        m_axi_gmem1_AWCACHE,
        m_axi_gmem1_AWPROT,
        m_axi_gmem1_AWQOS,
        m_axi_gmem1_AWREGION,
        m_axi_gmem1_AWUSER,
        m_axi_gmem1_WVALID,
        m_axi_gmem1_WREADY,
        m_axi_gmem1_WDATA,
        m_axi_gmem1_WSTRB,
        m_axi_gmem1_WLAST,
        m_axi_gmem1_WID,
        m_axi_gmem1_WUSER,
        m_axi_gmem1_ARVALID,
        m_axi_gmem1_ARREADY,
        m_axi_gmem1_ARADDR,
        m_axi_gmem1_ARID,
        m_axi_gmem1_ARLEN,
        m_axi_gmem1_ARSIZE,
        m_axi_gmem1_ARBURST,
        m_axi_gmem1_ARLOCK,
        m_axi_gmem1_ARCACHE,
        m_axi_gmem1_ARPROT,
        m_axi_gmem1_ARQOS,
        m_axi_gmem1_ARREGION,
        m_axi_gmem1_ARUSER,
        m_axi_gmem1_RVALID,
        m_axi_gmem1_RREADY,
        m_axi_gmem1_RDATA,
        m_axi_gmem1_RLAST,
        m_axi_gmem1_RID,
        m_axi_gmem1_RUSER,
        m_axi_gmem1_RRESP,
        m_axi_gmem1_BVALID,
        m_axi_gmem1_BREADY,
        m_axi_gmem1_BRESP,
        m_axi_gmem1_BID,
        m_axi_gmem1_BUSER,
        m_axi_gmem2_AWVALID,
        m_axi_gmem2_AWREADY,
        m_axi_gmem2_AWADDR,
        m_axi_gmem2_AWID,
        m_axi_gmem2_AWLEN,
        m_axi_gmem2_AWSIZE,
        m_axi_gmem2_AWBURST,
        m_axi_gmem2_AWLOCK,
        m_axi_gmem2_AWCACHE,
        m_axi_gmem2_AWPROT,
        m_axi_gmem2_AWQOS,
        m_axi_gmem2_AWREGION,
        m_axi_gmem2_AWUSER,
        m_axi_gmem2_WVALID,
        m_axi_gmem2_WREADY,
        m_axi_gmem2_WDATA,
        m_axi_gmem2_WSTRB,
        m_axi_gmem2_WLAST,
        m_axi_gmem2_WID,
        m_axi_gmem2_WUSER,
        m_axi_gmem2_ARVALID,
        m_axi_gmem2_ARREADY,
        m_axi_gmem2_ARADDR,
        m_axi_gmem2_ARID,
        m_axi_gmem2_ARLEN,
        m_axi_gmem2_ARSIZE,
        m_axi_gmem2_ARBURST,
        m_axi_gmem2_ARLOCK,
        m_axi_gmem2_ARCACHE,
        m_axi_gmem2_ARPROT,
        m_axi_gmem2_ARQOS,
        m_axi_gmem2_ARREGION,
        m_axi_gmem2_ARUSER,
        m_axi_gmem2_RVALID,
        m_axi_gmem2_RREADY,
        m_axi_gmem2_RDATA,
        m_axi_gmem2_RLAST,
        m_axi_gmem2_RID,
        m_axi_gmem2_RUSER,
        m_axi_gmem2_RRESP,
        m_axi_gmem2_BVALID,
        m_axi_gmem2_BREADY,
        m_axi_gmem2_BRESP,
        m_axi_gmem2_BID,
        m_axi_gmem2_BUSER,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 305'd1;
parameter    ap_ST_fsm_state2 = 305'd2;
parameter    ap_ST_fsm_state3 = 305'd4;
parameter    ap_ST_fsm_state4 = 305'd8;
parameter    ap_ST_fsm_state5 = 305'd16;
parameter    ap_ST_fsm_state6 = 305'd32;
parameter    ap_ST_fsm_state7 = 305'd64;
parameter    ap_ST_fsm_state8 = 305'd128;
parameter    ap_ST_fsm_state9 = 305'd256;
parameter    ap_ST_fsm_state10 = 305'd512;
parameter    ap_ST_fsm_state11 = 305'd1024;
parameter    ap_ST_fsm_state12 = 305'd2048;
parameter    ap_ST_fsm_state13 = 305'd4096;
parameter    ap_ST_fsm_state14 = 305'd8192;
parameter    ap_ST_fsm_state15 = 305'd16384;
parameter    ap_ST_fsm_state16 = 305'd32768;
parameter    ap_ST_fsm_state17 = 305'd65536;
parameter    ap_ST_fsm_state18 = 305'd131072;
parameter    ap_ST_fsm_state19 = 305'd262144;
parameter    ap_ST_fsm_state20 = 305'd524288;
parameter    ap_ST_fsm_state21 = 305'd1048576;
parameter    ap_ST_fsm_state22 = 305'd2097152;
parameter    ap_ST_fsm_state23 = 305'd4194304;
parameter    ap_ST_fsm_state24 = 305'd8388608;
parameter    ap_ST_fsm_state25 = 305'd16777216;
parameter    ap_ST_fsm_state26 = 305'd33554432;
parameter    ap_ST_fsm_state27 = 305'd67108864;
parameter    ap_ST_fsm_state28 = 305'd134217728;
parameter    ap_ST_fsm_state29 = 305'd268435456;
parameter    ap_ST_fsm_state30 = 305'd536870912;
parameter    ap_ST_fsm_state31 = 305'd1073741824;
parameter    ap_ST_fsm_state32 = 305'd2147483648;
parameter    ap_ST_fsm_state33 = 305'd4294967296;
parameter    ap_ST_fsm_state34 = 305'd8589934592;
parameter    ap_ST_fsm_state35 = 305'd17179869184;
parameter    ap_ST_fsm_state36 = 305'd34359738368;
parameter    ap_ST_fsm_state37 = 305'd68719476736;
parameter    ap_ST_fsm_state38 = 305'd137438953472;
parameter    ap_ST_fsm_state39 = 305'd274877906944;
parameter    ap_ST_fsm_state40 = 305'd549755813888;
parameter    ap_ST_fsm_state41 = 305'd1099511627776;
parameter    ap_ST_fsm_state42 = 305'd2199023255552;
parameter    ap_ST_fsm_state43 = 305'd4398046511104;
parameter    ap_ST_fsm_state44 = 305'd8796093022208;
parameter    ap_ST_fsm_state45 = 305'd17592186044416;
parameter    ap_ST_fsm_state46 = 305'd35184372088832;
parameter    ap_ST_fsm_state47 = 305'd70368744177664;
parameter    ap_ST_fsm_state48 = 305'd140737488355328;
parameter    ap_ST_fsm_state49 = 305'd281474976710656;
parameter    ap_ST_fsm_state50 = 305'd562949953421312;
parameter    ap_ST_fsm_state51 = 305'd1125899906842624;
parameter    ap_ST_fsm_state52 = 305'd2251799813685248;
parameter    ap_ST_fsm_state53 = 305'd4503599627370496;
parameter    ap_ST_fsm_state54 = 305'd9007199254740992;
parameter    ap_ST_fsm_state55 = 305'd18014398509481984;
parameter    ap_ST_fsm_state56 = 305'd36028797018963968;
parameter    ap_ST_fsm_state57 = 305'd72057594037927936;
parameter    ap_ST_fsm_state58 = 305'd144115188075855872;
parameter    ap_ST_fsm_state59 = 305'd288230376151711744;
parameter    ap_ST_fsm_state60 = 305'd576460752303423488;
parameter    ap_ST_fsm_state61 = 305'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 305'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 305'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 305'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 305'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 305'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 305'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 305'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 305'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 305'd590295810358705651712;
parameter    ap_ST_fsm_state71 = 305'd1180591620717411303424;
parameter    ap_ST_fsm_state72 = 305'd2361183241434822606848;
parameter    ap_ST_fsm_state73 = 305'd4722366482869645213696;
parameter    ap_ST_fsm_state74 = 305'd9444732965739290427392;
parameter    ap_ST_fsm_state75 = 305'd18889465931478580854784;
parameter    ap_ST_fsm_state76 = 305'd37778931862957161709568;
parameter    ap_ST_fsm_state77 = 305'd75557863725914323419136;
parameter    ap_ST_fsm_pp3_stage0 = 305'd151115727451828646838272;
parameter    ap_ST_fsm_state81 = 305'd302231454903657293676544;
parameter    ap_ST_fsm_state82 = 305'd604462909807314587353088;
parameter    ap_ST_fsm_state83 = 305'd1208925819614629174706176;
parameter    ap_ST_fsm_state84 = 305'd2417851639229258349412352;
parameter    ap_ST_fsm_state85 = 305'd4835703278458516698824704;
parameter    ap_ST_fsm_state86 = 305'd9671406556917033397649408;
parameter    ap_ST_fsm_state87 = 305'd19342813113834066795298816;
parameter    ap_ST_fsm_state88 = 305'd38685626227668133590597632;
parameter    ap_ST_fsm_state89 = 305'd77371252455336267181195264;
parameter    ap_ST_fsm_state90 = 305'd154742504910672534362390528;
parameter    ap_ST_fsm_state91 = 305'd309485009821345068724781056;
parameter    ap_ST_fsm_state92 = 305'd618970019642690137449562112;
parameter    ap_ST_fsm_state93 = 305'd1237940039285380274899124224;
parameter    ap_ST_fsm_state94 = 305'd2475880078570760549798248448;
parameter    ap_ST_fsm_state95 = 305'd4951760157141521099596496896;
parameter    ap_ST_fsm_state96 = 305'd9903520314283042199192993792;
parameter    ap_ST_fsm_state97 = 305'd19807040628566084398385987584;
parameter    ap_ST_fsm_state98 = 305'd39614081257132168796771975168;
parameter    ap_ST_fsm_state99 = 305'd79228162514264337593543950336;
parameter    ap_ST_fsm_state100 = 305'd158456325028528675187087900672;
parameter    ap_ST_fsm_state101 = 305'd316912650057057350374175801344;
parameter    ap_ST_fsm_state102 = 305'd633825300114114700748351602688;
parameter    ap_ST_fsm_state103 = 305'd1267650600228229401496703205376;
parameter    ap_ST_fsm_state104 = 305'd2535301200456458802993406410752;
parameter    ap_ST_fsm_state105 = 305'd5070602400912917605986812821504;
parameter    ap_ST_fsm_state106 = 305'd10141204801825835211973625643008;
parameter    ap_ST_fsm_state107 = 305'd20282409603651670423947251286016;
parameter    ap_ST_fsm_state108 = 305'd40564819207303340847894502572032;
parameter    ap_ST_fsm_state109 = 305'd81129638414606681695789005144064;
parameter    ap_ST_fsm_state110 = 305'd162259276829213363391578010288128;
parameter    ap_ST_fsm_state111 = 305'd324518553658426726783156020576256;
parameter    ap_ST_fsm_state112 = 305'd649037107316853453566312041152512;
parameter    ap_ST_fsm_state113 = 305'd1298074214633706907132624082305024;
parameter    ap_ST_fsm_state114 = 305'd2596148429267413814265248164610048;
parameter    ap_ST_fsm_state115 = 305'd5192296858534827628530496329220096;
parameter    ap_ST_fsm_state116 = 305'd10384593717069655257060992658440192;
parameter    ap_ST_fsm_state117 = 305'd20769187434139310514121985316880384;
parameter    ap_ST_fsm_state118 = 305'd41538374868278621028243970633760768;
parameter    ap_ST_fsm_state119 = 305'd83076749736557242056487941267521536;
parameter    ap_ST_fsm_state120 = 305'd166153499473114484112975882535043072;
parameter    ap_ST_fsm_state121 = 305'd332306998946228968225951765070086144;
parameter    ap_ST_fsm_state122 = 305'd664613997892457936451903530140172288;
parameter    ap_ST_fsm_state123 = 305'd1329227995784915872903807060280344576;
parameter    ap_ST_fsm_state124 = 305'd2658455991569831745807614120560689152;
parameter    ap_ST_fsm_state125 = 305'd5316911983139663491615228241121378304;
parameter    ap_ST_fsm_state126 = 305'd10633823966279326983230456482242756608;
parameter    ap_ST_fsm_state127 = 305'd21267647932558653966460912964485513216;
parameter    ap_ST_fsm_state128 = 305'd42535295865117307932921825928971026432;
parameter    ap_ST_fsm_state129 = 305'd85070591730234615865843651857942052864;
parameter    ap_ST_fsm_state130 = 305'd170141183460469231731687303715884105728;
parameter    ap_ST_fsm_state131 = 305'd340282366920938463463374607431768211456;
parameter    ap_ST_fsm_state132 = 305'd680564733841876926926749214863536422912;
parameter    ap_ST_fsm_state133 = 305'd1361129467683753853853498429727072845824;
parameter    ap_ST_fsm_state134 = 305'd2722258935367507707706996859454145691648;
parameter    ap_ST_fsm_state135 = 305'd5444517870735015415413993718908291383296;
parameter    ap_ST_fsm_state136 = 305'd10889035741470030830827987437816582766592;
parameter    ap_ST_fsm_state137 = 305'd21778071482940061661655974875633165533184;
parameter    ap_ST_fsm_state138 = 305'd43556142965880123323311949751266331066368;
parameter    ap_ST_fsm_state139 = 305'd87112285931760246646623899502532662132736;
parameter    ap_ST_fsm_state140 = 305'd174224571863520493293247799005065324265472;
parameter    ap_ST_fsm_state141 = 305'd348449143727040986586495598010130648530944;
parameter    ap_ST_fsm_state142 = 305'd696898287454081973172991196020261297061888;
parameter    ap_ST_fsm_state143 = 305'd1393796574908163946345982392040522594123776;
parameter    ap_ST_fsm_state144 = 305'd2787593149816327892691964784081045188247552;
parameter    ap_ST_fsm_state145 = 305'd5575186299632655785383929568162090376495104;
parameter    ap_ST_fsm_state146 = 305'd11150372599265311570767859136324180752990208;
parameter    ap_ST_fsm_state147 = 305'd22300745198530623141535718272648361505980416;
parameter    ap_ST_fsm_state148 = 305'd44601490397061246283071436545296723011960832;
parameter    ap_ST_fsm_state149 = 305'd89202980794122492566142873090593446023921664;
parameter    ap_ST_fsm_state150 = 305'd178405961588244985132285746181186892047843328;
parameter    ap_ST_fsm_state151 = 305'd356811923176489970264571492362373784095686656;
parameter    ap_ST_fsm_state152 = 305'd713623846352979940529142984724747568191373312;
parameter    ap_ST_fsm_pp4_stage0 = 305'd1427247692705959881058285969449495136382746624;
parameter    ap_ST_fsm_state156 = 305'd2854495385411919762116571938898990272765493248;
parameter    ap_ST_fsm_state157 = 305'd5708990770823839524233143877797980545530986496;
parameter    ap_ST_fsm_state158 = 305'd11417981541647679048466287755595961091061972992;
parameter    ap_ST_fsm_state159 = 305'd22835963083295358096932575511191922182123945984;
parameter    ap_ST_fsm_state160 = 305'd45671926166590716193865151022383844364247891968;
parameter    ap_ST_fsm_state161 = 305'd91343852333181432387730302044767688728495783936;
parameter    ap_ST_fsm_state162 = 305'd182687704666362864775460604089535377456991567872;
parameter    ap_ST_fsm_state163 = 305'd365375409332725729550921208179070754913983135744;
parameter    ap_ST_fsm_state164 = 305'd730750818665451459101842416358141509827966271488;
parameter    ap_ST_fsm_state165 = 305'd1461501637330902918203684832716283019655932542976;
parameter    ap_ST_fsm_state166 = 305'd2923003274661805836407369665432566039311865085952;
parameter    ap_ST_fsm_state167 = 305'd5846006549323611672814739330865132078623730171904;
parameter    ap_ST_fsm_state168 = 305'd11692013098647223345629478661730264157247460343808;
parameter    ap_ST_fsm_state169 = 305'd23384026197294446691258957323460528314494920687616;
parameter    ap_ST_fsm_state170 = 305'd46768052394588893382517914646921056628989841375232;
parameter    ap_ST_fsm_state171 = 305'd93536104789177786765035829293842113257979682750464;
parameter    ap_ST_fsm_state172 = 305'd187072209578355573530071658587684226515959365500928;
parameter    ap_ST_fsm_state173 = 305'd374144419156711147060143317175368453031918731001856;
parameter    ap_ST_fsm_state174 = 305'd748288838313422294120286634350736906063837462003712;
parameter    ap_ST_fsm_state175 = 305'd1496577676626844588240573268701473812127674924007424;
parameter    ap_ST_fsm_state176 = 305'd2993155353253689176481146537402947624255349848014848;
parameter    ap_ST_fsm_state177 = 305'd5986310706507378352962293074805895248510699696029696;
parameter    ap_ST_fsm_state178 = 305'd11972621413014756705924586149611790497021399392059392;
parameter    ap_ST_fsm_state179 = 305'd23945242826029513411849172299223580994042798784118784;
parameter    ap_ST_fsm_state180 = 305'd47890485652059026823698344598447161988085597568237568;
parameter    ap_ST_fsm_state181 = 305'd95780971304118053647396689196894323976171195136475136;
parameter    ap_ST_fsm_state182 = 305'd191561942608236107294793378393788647952342390272950272;
parameter    ap_ST_fsm_state183 = 305'd383123885216472214589586756787577295904684780545900544;
parameter    ap_ST_fsm_state184 = 305'd766247770432944429179173513575154591809369561091801088;
parameter    ap_ST_fsm_state185 = 305'd1532495540865888858358347027150309183618739122183602176;
parameter    ap_ST_fsm_state186 = 305'd3064991081731777716716694054300618367237478244367204352;
parameter    ap_ST_fsm_state187 = 305'd6129982163463555433433388108601236734474956488734408704;
parameter    ap_ST_fsm_state188 = 305'd12259964326927110866866776217202473468949912977468817408;
parameter    ap_ST_fsm_state189 = 305'd24519928653854221733733552434404946937899825954937634816;
parameter    ap_ST_fsm_state190 = 305'd49039857307708443467467104868809893875799651909875269632;
parameter    ap_ST_fsm_state191 = 305'd98079714615416886934934209737619787751599303819750539264;
parameter    ap_ST_fsm_state192 = 305'd196159429230833773869868419475239575503198607639501078528;
parameter    ap_ST_fsm_state193 = 305'd392318858461667547739736838950479151006397215279002157056;
parameter    ap_ST_fsm_state194 = 305'd784637716923335095479473677900958302012794430558004314112;
parameter    ap_ST_fsm_state195 = 305'd1569275433846670190958947355801916604025588861116008628224;
parameter    ap_ST_fsm_state196 = 305'd3138550867693340381917894711603833208051177722232017256448;
parameter    ap_ST_fsm_state197 = 305'd6277101735386680763835789423207666416102355444464034512896;
parameter    ap_ST_fsm_state198 = 305'd12554203470773361527671578846415332832204710888928069025792;
parameter    ap_ST_fsm_state199 = 305'd25108406941546723055343157692830665664409421777856138051584;
parameter    ap_ST_fsm_state200 = 305'd50216813883093446110686315385661331328818843555712276103168;
parameter    ap_ST_fsm_state201 = 305'd100433627766186892221372630771322662657637687111424552206336;
parameter    ap_ST_fsm_state202 = 305'd200867255532373784442745261542645325315275374222849104412672;
parameter    ap_ST_fsm_state203 = 305'd401734511064747568885490523085290650630550748445698208825344;
parameter    ap_ST_fsm_state204 = 305'd803469022129495137770981046170581301261101496891396417650688;
parameter    ap_ST_fsm_state205 = 305'd1606938044258990275541962092341162602522202993782792835301376;
parameter    ap_ST_fsm_state206 = 305'd3213876088517980551083924184682325205044405987565585670602752;
parameter    ap_ST_fsm_state207 = 305'd6427752177035961102167848369364650410088811975131171341205504;
parameter    ap_ST_fsm_state208 = 305'd12855504354071922204335696738729300820177623950262342682411008;
parameter    ap_ST_fsm_state209 = 305'd25711008708143844408671393477458601640355247900524685364822016;
parameter    ap_ST_fsm_state210 = 305'd51422017416287688817342786954917203280710495801049370729644032;
parameter    ap_ST_fsm_state211 = 305'd102844034832575377634685573909834406561420991602098741459288064;
parameter    ap_ST_fsm_state212 = 305'd205688069665150755269371147819668813122841983204197482918576128;
parameter    ap_ST_fsm_state213 = 305'd411376139330301510538742295639337626245683966408394965837152256;
parameter    ap_ST_fsm_state214 = 305'd822752278660603021077484591278675252491367932816789931674304512;
parameter    ap_ST_fsm_state215 = 305'd1645504557321206042154969182557350504982735865633579863348609024;
parameter    ap_ST_fsm_state216 = 305'd3291009114642412084309938365114701009965471731267159726697218048;
parameter    ap_ST_fsm_state217 = 305'd6582018229284824168619876730229402019930943462534319453394436096;
parameter    ap_ST_fsm_state218 = 305'd13164036458569648337239753460458804039861886925068638906788872192;
parameter    ap_ST_fsm_state219 = 305'd26328072917139296674479506920917608079723773850137277813577744384;
parameter    ap_ST_fsm_state220 = 305'd52656145834278593348959013841835216159447547700274555627155488768;
parameter    ap_ST_fsm_state221 = 305'd105312291668557186697918027683670432318895095400549111254310977536;
parameter    ap_ST_fsm_state222 = 305'd210624583337114373395836055367340864637790190801098222508621955072;
parameter    ap_ST_fsm_state223 = 305'd421249166674228746791672110734681729275580381602196445017243910144;
parameter    ap_ST_fsm_state224 = 305'd842498333348457493583344221469363458551160763204392890034487820288;
parameter    ap_ST_fsm_state225 = 305'd1684996666696914987166688442938726917102321526408785780068975640576;
parameter    ap_ST_fsm_state226 = 305'd3369993333393829974333376885877453834204643052817571560137951281152;
parameter    ap_ST_fsm_state227 = 305'd6739986666787659948666753771754907668409286105635143120275902562304;
parameter    ap_ST_fsm_state228 = 305'd13479973333575319897333507543509815336818572211270286240551805124608;
parameter    ap_ST_fsm_state229 = 305'd26959946667150639794667015087019630673637144422540572481103610249216;
parameter    ap_ST_fsm_state230 = 305'd53919893334301279589334030174039261347274288845081144962207220498432;
parameter    ap_ST_fsm_state231 = 305'd107839786668602559178668060348078522694548577690162289924414440996864;
parameter    ap_ST_fsm_state232 = 305'd215679573337205118357336120696157045389097155380324579848828881993728;
parameter    ap_ST_fsm_state233 = 305'd431359146674410236714672241392314090778194310760649159697657763987456;
parameter    ap_ST_fsm_state234 = 305'd862718293348820473429344482784628181556388621521298319395315527974912;
parameter    ap_ST_fsm_state235 = 305'd1725436586697640946858688965569256363112777243042596638790631055949824;
parameter    ap_ST_fsm_state236 = 305'd3450873173395281893717377931138512726225554486085193277581262111899648;
parameter    ap_ST_fsm_state237 = 305'd6901746346790563787434755862277025452451108972170386555162524223799296;
parameter    ap_ST_fsm_state238 = 305'd13803492693581127574869511724554050904902217944340773110325048447598592;
parameter    ap_ST_fsm_state239 = 305'd27606985387162255149739023449108101809804435888681546220650096895197184;
parameter    ap_ST_fsm_state240 = 305'd55213970774324510299478046898216203619608871777363092441300193790394368;
parameter    ap_ST_fsm_state241 = 305'd110427941548649020598956093796432407239217743554726184882600387580788736;
parameter    ap_ST_fsm_state242 = 305'd220855883097298041197912187592864814478435487109452369765200775161577472;
parameter    ap_ST_fsm_state243 = 305'd441711766194596082395824375185729628956870974218904739530401550323154944;
parameter    ap_ST_fsm_state244 = 305'd883423532389192164791648750371459257913741948437809479060803100646309888;
parameter    ap_ST_fsm_state245 = 305'd1766847064778384329583297500742918515827483896875618958121606201292619776;
parameter    ap_ST_fsm_state246 = 305'd3533694129556768659166595001485837031654967793751237916243212402585239552;
parameter    ap_ST_fsm_state247 = 305'd7067388259113537318333190002971674063309935587502475832486424805170479104;
parameter    ap_ST_fsm_state248 = 305'd14134776518227074636666380005943348126619871175004951664972849610340958208;
parameter    ap_ST_fsm_state249 = 305'd28269553036454149273332760011886696253239742350009903329945699220681916416;
parameter    ap_ST_fsm_state250 = 305'd56539106072908298546665520023773392506479484700019806659891398441363832832;
parameter    ap_ST_fsm_state251 = 305'd113078212145816597093331040047546785012958969400039613319782796882727665664;
parameter    ap_ST_fsm_state252 = 305'd226156424291633194186662080095093570025917938800079226639565593765455331328;
parameter    ap_ST_fsm_state253 = 305'd452312848583266388373324160190187140051835877600158453279131187530910662656;
parameter    ap_ST_fsm_state254 = 305'd904625697166532776746648320380374280103671755200316906558262375061821325312;
parameter    ap_ST_fsm_state255 = 305'd1809251394333065553493296640760748560207343510400633813116524750123642650624;
parameter    ap_ST_fsm_state256 = 305'd3618502788666131106986593281521497120414687020801267626233049500247285301248;
parameter    ap_ST_fsm_state257 = 305'd7237005577332262213973186563042994240829374041602535252466099000494570602496;
parameter    ap_ST_fsm_state258 = 305'd14474011154664524427946373126085988481658748083205070504932198000989141204992;
parameter    ap_ST_fsm_state259 = 305'd28948022309329048855892746252171976963317496166410141009864396001978282409984;
parameter    ap_ST_fsm_state260 = 305'd57896044618658097711785492504343953926634992332820282019728792003956564819968;
parameter    ap_ST_fsm_state261 = 305'd115792089237316195423570985008687907853269984665640564039457584007913129639936;
parameter    ap_ST_fsm_state262 = 305'd231584178474632390847141970017375815706539969331281128078915168015826259279872;
parameter    ap_ST_fsm_state263 = 305'd463168356949264781694283940034751631413079938662562256157830336031652518559744;
parameter    ap_ST_fsm_state264 = 305'd926336713898529563388567880069503262826159877325124512315660672063305037119488;
parameter    ap_ST_fsm_state265 = 305'd1852673427797059126777135760139006525652319754650249024631321344126610074238976;
parameter    ap_ST_fsm_state266 = 305'd3705346855594118253554271520278013051304639509300498049262642688253220148477952;
parameter    ap_ST_fsm_state267 = 305'd7410693711188236507108543040556026102609279018600996098525285376506440296955904;
parameter    ap_ST_fsm_state268 = 305'd14821387422376473014217086081112052205218558037201992197050570753012880593911808;
parameter    ap_ST_fsm_state269 = 305'd29642774844752946028434172162224104410437116074403984394101141506025761187823616;
parameter    ap_ST_fsm_state270 = 305'd59285549689505892056868344324448208820874232148807968788202283012051522375647232;
parameter    ap_ST_fsm_state271 = 305'd118571099379011784113736688648896417641748464297615937576404566024103044751294464;
parameter    ap_ST_fsm_state272 = 305'd237142198758023568227473377297792835283496928595231875152809132048206089502588928;
parameter    ap_ST_fsm_state273 = 305'd474284397516047136454946754595585670566993857190463750305618264096412179005177856;
parameter    ap_ST_fsm_state274 = 305'd948568795032094272909893509191171341133987714380927500611236528192824358010355712;
parameter    ap_ST_fsm_state275 = 305'd1897137590064188545819787018382342682267975428761855001222473056385648716020711424;
parameter    ap_ST_fsm_state276 = 305'd3794275180128377091639574036764685364535950857523710002444946112771297432041422848;
parameter    ap_ST_fsm_state277 = 305'd7588550360256754183279148073529370729071901715047420004889892225542594864082845696;
parameter    ap_ST_fsm_state278 = 305'd15177100720513508366558296147058741458143803430094840009779784451085189728165691392;
parameter    ap_ST_fsm_state279 = 305'd30354201441027016733116592294117482916287606860189680019559568902170379456331382784;
parameter    ap_ST_fsm_state280 = 305'd60708402882054033466233184588234965832575213720379360039119137804340758912662765568;
parameter    ap_ST_fsm_state281 = 305'd121416805764108066932466369176469931665150427440758720078238275608681517825325531136;
parameter    ap_ST_fsm_state282 = 305'd242833611528216133864932738352939863330300854881517440156476551217363035650651062272;
parameter    ap_ST_fsm_state283 = 305'd485667223056432267729865476705879726660601709763034880312953102434726071301302124544;
parameter    ap_ST_fsm_state284 = 305'd971334446112864535459730953411759453321203419526069760625906204869452142602604249088;
parameter    ap_ST_fsm_state285 = 305'd1942668892225729070919461906823518906642406839052139521251812409738904285205208498176;
parameter    ap_ST_fsm_state286 = 305'd3885337784451458141838923813647037813284813678104279042503624819477808570410416996352;
parameter    ap_ST_fsm_state287 = 305'd7770675568902916283677847627294075626569627356208558085007249638955617140820833992704;
parameter    ap_ST_fsm_state288 = 305'd15541351137805832567355695254588151253139254712417116170014499277911234281641667985408;
parameter    ap_ST_fsm_state289 = 305'd31082702275611665134711390509176302506278509424834232340028998555822468563283335970816;
parameter    ap_ST_fsm_state290 = 305'd62165404551223330269422781018352605012557018849668464680057997111644937126566671941632;
parameter    ap_ST_fsm_state291 = 305'd124330809102446660538845562036705210025114037699336929360115994223289874253133343883264;
parameter    ap_ST_fsm_state292 = 305'd248661618204893321077691124073410420050228075398673858720231988446579748506266687766528;
parameter    ap_ST_fsm_state293 = 305'd497323236409786642155382248146820840100456150797347717440463976893159497012533375533056;
parameter    ap_ST_fsm_state294 = 305'd994646472819573284310764496293641680200912301594695434880927953786318994025066751066112;
parameter    ap_ST_fsm_state295 = 305'd1989292945639146568621528992587283360401824603189390869761855907572637988050133502132224;
parameter    ap_ST_fsm_state296 = 305'd3978585891278293137243057985174566720803649206378781739523711815145275976100267004264448;
parameter    ap_ST_fsm_state297 = 305'd7957171782556586274486115970349133441607298412757563479047423630290551952200534008528896;
parameter    ap_ST_fsm_state298 = 305'd15914343565113172548972231940698266883214596825515126958094847260581103904401068017057792;
parameter    ap_ST_fsm_state299 = 305'd31828687130226345097944463881396533766429193651030253916189694521162207808802136034115584;
parameter    ap_ST_fsm_state300 = 305'd63657374260452690195888927762793067532858387302060507832379389042324415617604272068231168;
parameter    ap_ST_fsm_state301 = 305'd127314748520905380391777855525586135065716774604121015664758778084648831235208544136462336;
parameter    ap_ST_fsm_state302 = 305'd254629497041810760783555711051172270131433549208242031329517556169297662470417088272924672;
parameter    ap_ST_fsm_state303 = 305'd509258994083621521567111422102344540262867098416484062659035112338595324940834176545849344;
parameter    ap_ST_fsm_state304 = 305'd1018517988167243043134222844204689080525734196832968125318070224677190649881668353091698688;
parameter    ap_ST_fsm_state305 = 305'd2037035976334486086268445688409378161051468393665936250636140449354381299763336706183397376;
parameter    ap_ST_fsm_state306 = 305'd4074071952668972172536891376818756322102936787331872501272280898708762599526673412366794752;
parameter    ap_ST_fsm_state307 = 305'd8148143905337944345073782753637512644205873574663745002544561797417525199053346824733589504;
parameter    ap_ST_fsm_state308 = 305'd16296287810675888690147565507275025288411747149327490005089123594835050398106693649467179008;
parameter    ap_ST_fsm_state309 = 305'd32592575621351777380295131014550050576823494298654980010178247189670100796213387298934358016;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 7;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM1_ID_WIDTH = 1;
parameter    C_M_AXI_GMEM1_ADDR_WIDTH = 64;
parameter    C_M_AXI_GMEM1_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM1_AWUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM1_ARUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM1_WUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM1_RUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM1_BUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM1_USER_VALUE = 0;
parameter    C_M_AXI_GMEM1_PROT_VALUE = 0;
parameter    C_M_AXI_GMEM1_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM2_ID_WIDTH = 1;
parameter    C_M_AXI_GMEM2_ADDR_WIDTH = 64;
parameter    C_M_AXI_GMEM2_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM2_AWUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM2_ARUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM2_WUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM2_RUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM2_BUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM2_USER_VALUE = 0;
parameter    C_M_AXI_GMEM2_PROT_VALUE = 0;
parameter    C_M_AXI_GMEM2_CACHE_VALUE = 3;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_GMEM1_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_GMEM2_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_gmem1_AWVALID;
input   m_axi_gmem1_AWREADY;
output  [C_M_AXI_GMEM1_ADDR_WIDTH - 1:0] m_axi_gmem1_AWADDR;
output  [C_M_AXI_GMEM1_ID_WIDTH - 1:0] m_axi_gmem1_AWID;
output  [7:0] m_axi_gmem1_AWLEN;
output  [2:0] m_axi_gmem1_AWSIZE;
output  [1:0] m_axi_gmem1_AWBURST;
output  [1:0] m_axi_gmem1_AWLOCK;
output  [3:0] m_axi_gmem1_AWCACHE;
output  [2:0] m_axi_gmem1_AWPROT;
output  [3:0] m_axi_gmem1_AWQOS;
output  [3:0] m_axi_gmem1_AWREGION;
output  [C_M_AXI_GMEM1_AWUSER_WIDTH - 1:0] m_axi_gmem1_AWUSER;
output   m_axi_gmem1_WVALID;
input   m_axi_gmem1_WREADY;
output  [C_M_AXI_GMEM1_DATA_WIDTH - 1:0] m_axi_gmem1_WDATA;
output  [C_M_AXI_GMEM1_WSTRB_WIDTH - 1:0] m_axi_gmem1_WSTRB;
output   m_axi_gmem1_WLAST;
output  [C_M_AXI_GMEM1_ID_WIDTH - 1:0] m_axi_gmem1_WID;
output  [C_M_AXI_GMEM1_WUSER_WIDTH - 1:0] m_axi_gmem1_WUSER;
output   m_axi_gmem1_ARVALID;
input   m_axi_gmem1_ARREADY;
output  [C_M_AXI_GMEM1_ADDR_WIDTH - 1:0] m_axi_gmem1_ARADDR;
output  [C_M_AXI_GMEM1_ID_WIDTH - 1:0] m_axi_gmem1_ARID;
output  [7:0] m_axi_gmem1_ARLEN;
output  [2:0] m_axi_gmem1_ARSIZE;
output  [1:0] m_axi_gmem1_ARBURST;
output  [1:0] m_axi_gmem1_ARLOCK;
output  [3:0] m_axi_gmem1_ARCACHE;
output  [2:0] m_axi_gmem1_ARPROT;
output  [3:0] m_axi_gmem1_ARQOS;
output  [3:0] m_axi_gmem1_ARREGION;
output  [C_M_AXI_GMEM1_ARUSER_WIDTH - 1:0] m_axi_gmem1_ARUSER;
input   m_axi_gmem1_RVALID;
output   m_axi_gmem1_RREADY;
input  [C_M_AXI_GMEM1_DATA_WIDTH - 1:0] m_axi_gmem1_RDATA;
input   m_axi_gmem1_RLAST;
input  [C_M_AXI_GMEM1_ID_WIDTH - 1:0] m_axi_gmem1_RID;
input  [C_M_AXI_GMEM1_RUSER_WIDTH - 1:0] m_axi_gmem1_RUSER;
input  [1:0] m_axi_gmem1_RRESP;
input   m_axi_gmem1_BVALID;
output   m_axi_gmem1_BREADY;
input  [1:0] m_axi_gmem1_BRESP;
input  [C_M_AXI_GMEM1_ID_WIDTH - 1:0] m_axi_gmem1_BID;
input  [C_M_AXI_GMEM1_BUSER_WIDTH - 1:0] m_axi_gmem1_BUSER;
output   m_axi_gmem2_AWVALID;
input   m_axi_gmem2_AWREADY;
output  [C_M_AXI_GMEM2_ADDR_WIDTH - 1:0] m_axi_gmem2_AWADDR;
output  [C_M_AXI_GMEM2_ID_WIDTH - 1:0] m_axi_gmem2_AWID;
output  [7:0] m_axi_gmem2_AWLEN;
output  [2:0] m_axi_gmem2_AWSIZE;
output  [1:0] m_axi_gmem2_AWBURST;
output  [1:0] m_axi_gmem2_AWLOCK;
output  [3:0] m_axi_gmem2_AWCACHE;
output  [2:0] m_axi_gmem2_AWPROT;
output  [3:0] m_axi_gmem2_AWQOS;
output  [3:0] m_axi_gmem2_AWREGION;
output  [C_M_AXI_GMEM2_AWUSER_WIDTH - 1:0] m_axi_gmem2_AWUSER;
output   m_axi_gmem2_WVALID;
input   m_axi_gmem2_WREADY;
output  [C_M_AXI_GMEM2_DATA_WIDTH - 1:0] m_axi_gmem2_WDATA;
output  [C_M_AXI_GMEM2_WSTRB_WIDTH - 1:0] m_axi_gmem2_WSTRB;
output   m_axi_gmem2_WLAST;
output  [C_M_AXI_GMEM2_ID_WIDTH - 1:0] m_axi_gmem2_WID;
output  [C_M_AXI_GMEM2_WUSER_WIDTH - 1:0] m_axi_gmem2_WUSER;
output   m_axi_gmem2_ARVALID;
input   m_axi_gmem2_ARREADY;
output  [C_M_AXI_GMEM2_ADDR_WIDTH - 1:0] m_axi_gmem2_ARADDR;
output  [C_M_AXI_GMEM2_ID_WIDTH - 1:0] m_axi_gmem2_ARID;
output  [7:0] m_axi_gmem2_ARLEN;
output  [2:0] m_axi_gmem2_ARSIZE;
output  [1:0] m_axi_gmem2_ARBURST;
output  [1:0] m_axi_gmem2_ARLOCK;
output  [3:0] m_axi_gmem2_ARCACHE;
output  [2:0] m_axi_gmem2_ARPROT;
output  [3:0] m_axi_gmem2_ARQOS;
output  [3:0] m_axi_gmem2_ARREGION;
output  [C_M_AXI_GMEM2_ARUSER_WIDTH - 1:0] m_axi_gmem2_ARUSER;
input   m_axi_gmem2_RVALID;
output   m_axi_gmem2_RREADY;
input  [C_M_AXI_GMEM2_DATA_WIDTH - 1:0] m_axi_gmem2_RDATA;
input   m_axi_gmem2_RLAST;
input  [C_M_AXI_GMEM2_ID_WIDTH - 1:0] m_axi_gmem2_RID;
input  [C_M_AXI_GMEM2_RUSER_WIDTH - 1:0] m_axi_gmem2_RUSER;
input  [1:0] m_axi_gmem2_RRESP;
input   m_axi_gmem2_BVALID;
output   m_axi_gmem2_BREADY;
input  [1:0] m_axi_gmem2_BRESP;
input  [C_M_AXI_GMEM2_ID_WIDTH - 1:0] m_axi_gmem2_BID;
input  [C_M_AXI_GMEM2_BUSER_WIDTH - 1:0] m_axi_gmem2_BUSER;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;
output   interrupt;

(* shreg_extract = "no" *) reg    ap_rst_reg_2;
(* shreg_extract = "no" *) reg    ap_rst_reg_1;
(* shreg_extract = "no" *) reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
wire    ap_continue;
reg    ap_done_reg;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [304:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [63:0] string1_mem;
wire   [63:0] string2_mem;
wire   [63:0] max_index;
wire   [63:0] direction_matrix;
wire  signed [31:0] n;
wire   [31:0] m;
reg    gmem1_blk_n_AR;
wire    ap_CS_fsm_state8;
reg   [0:0] icmp_ln90_reg_1789;
reg    gmem1_blk_n_R;
wire    ap_CS_fsm_pp3_stage0;
reg    ap_enable_reg_pp3_iter1;
wire    ap_block_pp3_stage0;
wire    ap_CS_fsm_pp4_stage0;
reg    ap_enable_reg_pp4_iter1;
wire    ap_block_pp4_stage0;
wire    ap_CS_fsm_state83;
reg   [0:0] icmp_ln91_reg_1844;
reg    gmem2_blk_n_AW;
wire    ap_CS_fsm_state170;
reg    gmem2_blk_n_W;
wire    ap_CS_fsm_state171;
reg    gmem2_blk_n_B;
wire    ap_CS_fsm_state239;
wire    ap_CS_fsm_state240;
wire    ap_CS_fsm_state241;
wire    ap_CS_fsm_state309;
wire    gmem1_AWREADY;
wire    gmem1_WREADY;
reg    gmem1_ARVALID;
wire    gmem1_ARREADY;
reg   [63:0] gmem1_ARADDR;
reg   [31:0] gmem1_ARLEN;
wire    gmem1_RVALID;
reg    gmem1_RREADY;
wire   [7:0] gmem1_RDATA;
wire    gmem1_RLAST;
wire   [0:0] gmem1_RID;
wire   [0:0] gmem1_RUSER;
wire   [1:0] gmem1_RRESP;
wire    gmem1_BVALID;
wire   [1:0] gmem1_BRESP;
wire   [0:0] gmem1_BID;
wire   [0:0] gmem1_BUSER;
reg    gmem2_AWVALID;
wire    gmem2_AWREADY;
reg   [63:0] gmem2_AWADDR;
reg    gmem2_WVALID;
wire    gmem2_WREADY;
reg   [31:0] gmem2_WDATA;
reg   [3:0] gmem2_WSTRB;
wire    gmem2_ARREADY;
wire    gmem2_RVALID;
wire   [31:0] gmem2_RDATA;
wire    gmem2_RLAST;
wire   [0:0] gmem2_RID;
wire   [0:0] gmem2_RUSER;
wire   [1:0] gmem2_RRESP;
wire    gmem2_BVALID;
reg    gmem2_BREADY;
wire   [1:0] gmem2_BRESP;
wire   [0:0] gmem2_BID;
wire   [0:0] gmem2_BUSER;
reg   [63:0] loop_index61_reg_686;
reg   [63:0] loop_index55_reg_697;
reg   [63:0] direction_matrix_read_reg_1736;
reg   [63:0] max_index_read_reg_1741;
reg   [63:0] string2_mem_read_reg_1746;
reg   [63:0] string1_mem_read_reg_1751;
wire   [9:0] empty_36_fu_802_p2;
wire    ap_CS_fsm_state2;
wire   [8:0] empty_40_fu_840_p2;
wire    ap_CS_fsm_state4;
wire   [8:0] empty_44_fu_872_p2;
wire    ap_CS_fsm_state6;
wire   [0:0] icmp_ln90_fu_904_p2;
wire    ap_CS_fsm_state7;
wire  signed [63:0] sext_ln90_fu_909_p1;
reg  signed [63:0] sext_ln90_reg_1793;
wire   [63:0] empty_48_fu_918_p2;
reg    ap_enable_reg_pp3_iter0;
wire    ap_block_state78_pp3_stage0_iter0;
reg    ap_block_state79_pp3_stage0_iter1;
wire    ap_block_state80_pp3_stage0_iter2;
reg    ap_block_pp3_stage0_11001;
wire   [0:0] exitcond7511_fu_924_p2;
wire   [0:0] empty_50_fu_929_p1;
reg   [0:0] empty_50_reg_1815;
reg   [0:0] empty_50_reg_1815_pp3_iter1_reg;
reg   [6:0] newIndex_reg_1819;
reg   [6:0] newIndex_reg_1819_pp3_iter1_reg;
wire   [2:0] empty_49_fu_943_p1;
reg   [2:0] empty_49_reg_1824;
wire  signed [31:0] add_ln91_fu_952_p2;
reg  signed [31:0] add_ln91_reg_1830;
wire    ap_CS_fsm_state81;
wire  signed [31:0] add_ln91_1_fu_962_p2;
reg  signed [31:0] add_ln91_1_reg_1838;
wire    ap_CS_fsm_state82;
wire   [0:0] icmp_ln91_fu_967_p2;
wire   [16:0] add_ln91_2_fu_976_p2;
reg   [16:0] add_ln91_2_reg_1848;
wire  signed [63:0] sext_ln91_fu_982_p1;
reg  signed [63:0] sext_ln91_reg_1853;
wire   [63:0] empty_51_fu_991_p2;
reg    ap_enable_reg_pp4_iter0;
wire    ap_block_state153_pp4_stage0_iter0;
reg    ap_block_state154_pp4_stage0_iter1;
wire    ap_block_state155_pp4_stage0_iter2;
reg    ap_block_pp4_stage0_11001;
wire   [0:0] exitcond7410_fu_997_p2;
wire   [0:0] empty_53_fu_1002_p1;
reg   [0:0] empty_53_reg_1873;
reg   [0:0] empty_53_reg_1873_pp4_iter1_reg;
reg   [15:0] newIndex3_reg_1877;
reg   [15:0] newIndex3_reg_1877_pp4_iter1_reg;
wire   [2:0] empty_52_fu_1016_p1;
reg   [2:0] empty_52_reg_1882;
wire   [31:0] grp_fu_1025_p2;
reg   [31:0] mul54_reg_1902;
wire    ap_CS_fsm_state157;
wire  signed [61:0] mul68_cast_fu_1039_p1;
reg  signed [61:0] mul68_cast_reg_1907;
wire   [31:0] add_ln95_fu_1042_p2;
reg   [31:0] add_ln95_reg_1913;
wire   [31:0] add_ln95_1_fu_1046_p2;
reg   [31:0] add_ln95_1_reg_1918;
wire    ap_CS_fsm_state158;
wire   [63:0] add_ln95_2_fu_1052_p2;
reg   [63:0] add_ln95_2_reg_1923;
wire   [63:0] zext_ln101_fu_1078_p1;
reg   [63:0] zext_ln101_reg_1931;
wire   [0:0] icmp_ln95_fu_1057_p2;
wire   [62:0] zext_ln101_1_fu_1082_p1;
reg   [62:0] zext_ln101_1_reg_1936;
wire   [9:0] zext_ln101_2_fu_1086_p1;
reg   [9:0] zext_ln101_2_reg_1941;
wire   [31:0] trunc_ln101_fu_1090_p1;
wire   [16:0] add_ln122_fu_1094_p2;
reg   [16:0] add_ln122_reg_1951;
reg   [63:0] gmem2_addr_reg_1956;
wire   [0:0] icmp_ln102_fu_1134_p2;
reg   [0:0] icmp_ln102_reg_1965;
wire    ap_CS_fsm_state159;
wire   [0:0] tmp_1_fu_1126_p3;
wire   [7:0] trunc_ln101_1_fu_1139_p1;
reg   [7:0] trunc_ln101_1_reg_1969;
wire   [16:0] sub_ln122_fu_1171_p2;
reg   [16:0] sub_ln122_reg_1994;
wire   [0:0] icmp_ln150_fu_1225_p2;
reg   [0:0] icmp_ln150_reg_2029;
wire   [31:0] test_val_2_fu_1263_p3;
reg   [31:0] test_val_2_reg_2033;
wire    ap_CS_fsm_state160;
wire   [31:0] test_val_fu_1324_p2;
reg   [31:0] test_val_reg_2039;
wire   [30:0] add_ln66_fu_1330_p2;
reg   [30:0] add_ln66_reg_2044;
wire   [31:0] test_val_3_fu_1344_p2;
reg   [31:0] test_val_3_reg_2049;
wire   [0:0] icmp_ln123_fu_1350_p2;
reg   [0:0] icmp_ln123_reg_2055;
wire    ap_CS_fsm_state161;
wire   [0:0] icmp_ln131_fu_1366_p2;
reg   [0:0] icmp_ln131_reg_2060;
wire   [31:0] val_2_fu_1371_p3;
reg   [31:0] val_2_reg_2065;
wire   [31:0] index_2_fu_1381_p2;
reg   [31:0] index_2_reg_2071;
wire    ap_CS_fsm_state162;
wire   [31:0] max_index_buf_2_fu_1439_p3;
reg   [31:0] max_index_buf_2_reg_2076;
wire   [31:0] max_value_2_fu_1447_p3;
reg   [31:0] max_value_2_reg_2081;
wire   [8:0] j_1_fu_1470_p2;
reg   [8:0] j_1_reg_2086;
wire    ap_CS_fsm_state163;
wire   [61:0] empty_57_fu_1476_p2;
reg   [61:0] empty_57_reg_2091;
wire    ap_CS_fsm_state165;
wire   [0:0] empty_59_fu_1487_p1;
reg   [0:0] empty_59_reg_2099;
wire   [0:0] exitcond5_fu_1482_p2;
reg   [6:0] upper_diag_0_addr_2_reg_2114;
reg   [6:0] upper_diag_1_addr_2_reg_2119;
wire   [61:0] empty_60_fu_1518_p2;
reg   [61:0] empty_60_reg_2124;
wire    ap_CS_fsm_state167;
wire   [0:0] exitcond686_fu_1532_p2;
wire   [0:0] icmp29_fu_1558_p2;
reg   [0:0] icmp29_reg_2142;
wire   [0:0] empty_63_fu_1564_p1;
reg   [0:0] empty_63_reg_2147;
reg   [6:0] newIndex5_reg_2151;
wire   [63:0] add_ln98_fu_1578_p2;
reg   [63:0] add_ln98_reg_2156;
wire   [1:0] empty_73_fu_1583_p1;
reg   [1:0] empty_73_reg_2161;
wire   [63:0] empty_64_fu_1601_p2;
reg   [63:0] empty_64_reg_2166;
wire    ap_CS_fsm_state169;
wire   [0:0] exitcond_fu_1607_p2;
wire   [0:0] icmp32_fu_1637_p2;
reg   [0:0] icmp32_reg_2184;
wire   [1:0] empty_68_fu_1652_p2;
reg   [1:0] empty_68_reg_2189;
reg   [63:0] gmem2_addr_1_reg_2195;
wire   [3:0] empty_69_fu_1691_p2;
reg   [3:0] empty_69_reg_2201;
wire   [25:0] empty_70_fu_1708_p2;
reg   [25:0] empty_70_reg_2206;
wire    ap_CS_fsm_state77;
reg    ap_block_pp3_stage0_subdone;
reg    ap_condition_pp3_exit_iter0_state78;
reg    ap_enable_reg_pp3_iter2;
wire    ap_CS_fsm_state152;
reg    ap_block_pp4_stage0_subdone;
reg    ap_condition_pp4_exit_iter0_state153;
reg    ap_enable_reg_pp4_iter2;
reg   [6:0] string1_0_V_address0;
reg    string1_0_V_ce0;
reg    string1_0_V_we0;
wire   [2:0] string1_0_V_q0;
reg   [6:0] string1_1_V_address0;
reg    string1_1_V_ce0;
reg    string1_1_V_we0;
wire   [2:0] string1_1_V_q0;
reg   [15:0] string2_0_V_address0;
reg    string2_0_V_ce0;
reg    string2_0_V_we0;
wire   [2:0] string2_0_V_q0;
reg   [15:0] string2_1_V_address0;
reg    string2_1_V_ce0;
reg    string2_1_V_we0;
wire   [2:0] string2_1_V_q0;
reg   [7:0] current_diag_0_address0;
reg    current_diag_0_ce0;
reg    current_diag_0_we0;
reg   [31:0] current_diag_0_d0;
wire   [31:0] current_diag_0_q0;
reg   [7:0] current_diag_1_address0;
reg    current_diag_1_ce0;
reg    current_diag_1_we0;
reg   [31:0] current_diag_1_d0;
wire   [31:0] current_diag_1_q0;
reg   [6:0] up_diag_0_address0;
reg    up_diag_0_ce0;
reg    up_diag_0_we0;
reg   [31:0] up_diag_0_d0;
wire   [31:0] up_diag_0_q0;
wire   [6:0] up_diag_0_address1;
reg    up_diag_0_ce1;
wire   [31:0] up_diag_0_q1;
reg   [6:0] up_diag_1_address0;
reg    up_diag_1_ce0;
reg    up_diag_1_we0;
reg   [31:0] up_diag_1_d0;
wire   [31:0] up_diag_1_q0;
wire   [6:0] up_diag_1_address1;
reg    up_diag_1_ce1;
wire   [31:0] up_diag_1_q1;
reg   [6:0] upper_diag_0_address0;
reg    upper_diag_0_ce0;
reg    upper_diag_0_we0;
reg   [31:0] upper_diag_0_d0;
wire   [31:0] upper_diag_0_q0;
reg   [6:0] upper_diag_1_address0;
reg    upper_diag_1_ce0;
reg    upper_diag_1_we0;
reg   [31:0] upper_diag_1_d0;
wire   [31:0] upper_diag_1_q0;
reg   [7:0] direction_diag_0_V_address0;
reg    direction_diag_0_V_ce0;
reg    direction_diag_0_V_we0;
wire   [1:0] direction_diag_0_V_q0;
reg   [7:0] direction_diag_1_V_address0;
reg    direction_diag_1_V_ce0;
reg    direction_diag_1_V_we0;
wire   [1:0] direction_diag_1_V_q0;
reg   [9:0] empty_reg_653;
reg    ap_block_state1;
wire   [0:0] exitcond7814_fu_808_p2;
reg   [8:0] empty_39_reg_664;
wire   [0:0] exitcond7713_fu_846_p2;
wire    ap_CS_fsm_state3;
reg   [8:0] empty_43_reg_675;
wire   [0:0] exitcond7612_fu_878_p2;
wire    ap_CS_fsm_state5;
reg   [31:0] i_reg_708;
reg   [63:0] phi_mul_reg_719;
reg  signed [8:0] j_reg_731;
wire    ap_CS_fsm_state164;
reg   [31:0] index_reg_743;
reg   [31:0] index_1_reg_753;
reg   [61:0] loop_index49_reg_765;
wire    ap_CS_fsm_state166;
reg   [61:0] loop_index43_reg_776;
wire    ap_CS_fsm_state168;
reg   [63:0] loop_index_reg_787;
wire   [63:0] newIndex59_fu_818_p1;
wire   [63:0] newIndex94_cast_fu_866_p1;
wire   [63:0] newIndex113_cast_fu_898_p1;
wire   [63:0] newIndex_cast_fu_947_p1;
wire   [63:0] newIndex31_cast_fu_1020_p1;
wire   [63:0] zext_ln113_fu_1159_p1;
wire   [63:0] zext_ln870_1_fu_1186_p1;
wire   [63:0] zext_ln870_fu_1204_p1;
wire   [63:0] zext_ln150_fu_1455_p1;
wire   [63:0] newIndex71_cast_fu_1501_p1;
wire   [63:0] newIndex45_fu_1542_p1;
wire   [63:0] newIndex65_cast_fu_1596_p1;
wire   [63:0] newIndex125_fu_1621_p1;
wire  signed [63:0] sext_ln159_fu_1108_p1;
wire  signed [63:0] p_cast10_cast_fu_1667_p1;
reg    ap_block_state8_io;
reg    ap_block_state83_io;
wire   [31:0] p_cast19_fu_1714_p1;
reg   [31:0] max_index_buf_fu_246;
wire    ap_CS_fsm_state156;
reg   [31:0] max_value_fu_250;
wire   [0:0] icmp_fu_834_p2;
wire   [31:0] max_value_3_fu_1420_p3;
wire   [0:0] empty_42_fu_852_p1;
wire   [31:0] current_diag_load_phi_fu_1587_p3;
wire   [0:0] empty_46_fu_884_p1;
wire   [31:0] up_diag_load_phi_fu_1509_p3;
wire   [1:0] dir_1_fu_1410_p3;
wire   [7:0] empty_38_fu_814_p1;
wire   [1:0] tmp_fu_824_p4;
wire   [6:0] newIndex1_fu_856_p4;
wire   [6:0] newIndex2_fu_888_p4;
wire  signed [31:0] icmp_ln90_fu_904_p0;
wire  signed [31:0] sext_ln90_fu_909_p0;
wire  signed [31:0] add_ln91_fu_952_p0;
wire   [31:0] shl_ln91_fu_957_p2;
wire  signed [31:0] trunc_ln91_fu_973_p0;
wire   [16:0] trunc_ln91_fu_973_p1;
wire  signed [31:0] mul68_cast_fu_1039_p0;
wire   [0:0] empty_55_fu_1066_p1;
wire   [8:0] rem_urem_fu_1070_p3;
wire   [16:0] empty_54_fu_1062_p1;
wire   [61:0] trunc_ln1_fu_1099_p4;
wire  signed [31:0] sext_ln101_1_fu_1122_p1;
wire  signed [31:0] icmp_ln102_fu_1134_p1;
wire   [7:0] add_ln113_fu_1143_p2;
wire   [6:0] lshr_ln_fu_1149_p4;
wire   [16:0] zext_ln101_3_fu_1167_p1;
wire   [6:0] lshr_ln1_fu_1176_p4;
wire   [15:0] lshr_ln870_1_fu_1194_p4;
wire  signed [9:0] sext_ln101_fu_1118_p1;
wire   [9:0] add_ln150_fu_1210_p2;
wire   [1:0] tmp_3_fu_1215_p4;
wire   [0:0] trunc_ln113_fu_1237_p1;
wire   [31:0] west_fu_1249_p3;
wire   [0:0] icmp_ln112_fu_1231_p2;
wire   [31:0] add_ln115_fu_1257_p2;
wire   [31:0] northwest_fu_1241_p3;
wire   [0:0] trunc_ln870_fu_1287_p1;
wire   [2:0] select_ln870_fu_1279_p3;
wire   [2:0] select_ln870_1_fu_1290_p3;
wire   [0:0] icmp_ln870_fu_1298_p2;
wire   [31:0] northwest_1_fu_1271_p3;
wire   [31:0] select_ln122_fu_1304_p3;
wire   [30:0] select_ln122_1_fu_1316_p3;
wire   [30:0] trunc_ln122_fu_1312_p1;
wire   [31:0] north_fu_1336_p3;
wire   [30:0] val_fu_1355_p3;
wire   [31:0] zext_ln68_fu_1362_p1;
wire   [0:0] icmp_ln138_fu_1393_p2;
wire   [0:0] or_ln138_fu_1405_p2;
wire   [1:0] select_ln138_fu_1397_p3;
wire   [1:0] dir_fu_1386_p3;
wire   [0:0] icmp_ln143_fu_1428_p2;
wire   [31:0] max_index_buf_1_fu_1434_p2;
wire   [6:0] newIndex4_fu_1491_p4;
wire   [62:0] loop_index43_cast11_fu_1528_p1;
wire   [7:0] empty_61_fu_1524_p1;
wire   [62:0] arrayidx73_sum_fu_1537_p2;
wire   [54:0] tmp_4_fu_1548_p4;
wire   [7:0] empty_65_fu_1612_p1;
wire   [63:0] arrayidx82_sum_fu_1616_p2;
wire   [55:0] tmp_5_fu_1627_p4;
wire   [1:0] empty_66_fu_1643_p1;
wire   [63:0] empty_67_fu_1647_p2;
wire   [61:0] p_cast_fu_1657_p4;
wire   [1:0] direction_diag_V_load_phi_fu_1677_p3;
wire   [3:0] p_cast18_fu_1688_p1;
wire   [4:0] tmp_2_fu_1697_p3;
wire   [25:0] direction_diag_V_load_phi_cast_fu_1684_p1;
wire   [25:0] p_cast9_fu_1704_p1;
reg   [304:0] ap_NS_fsm;
reg    ap_idle_pp3;
wire    ap_enable_pp3;
reg    ap_idle_pp4;
wire    ap_enable_pp4;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_rst_reg_2 = 1'b1;
#0 ap_rst_reg_1 = 1'b1;
#0 ap_rst_n_inv = 1'b1;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 305'd1;
#0 ap_enable_reg_pp3_iter1 = 1'b0;
#0 ap_enable_reg_pp4_iter1 = 1'b0;
#0 ap_enable_reg_pp3_iter0 = 1'b0;
#0 ap_enable_reg_pp4_iter0 = 1'b0;
#0 ap_enable_reg_pp3_iter2 = 1'b0;
#0 ap_enable_reg_pp4_iter2 = 1'b0;
end

compute_matrices_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .string1_mem(string1_mem),
    .string2_mem(string2_mem),
    .max_index(max_index),
    .direction_matrix(direction_matrix),
    .n(n),
    .m(m),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_continue(ap_continue),
    .ap_idle(ap_idle)
);

compute_matrices_gmem1_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 8 ),
    .USER_AW( 64 ),
    .USER_MAXREQS( 69 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_GMEM1_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_GMEM1_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_GMEM1_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_GMEM1_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_GMEM1_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_GMEM1_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_GMEM1_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_GMEM1_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_GMEM1_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_GMEM1_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_GMEM1_CACHE_VALUE ))
gmem1_m_axi_U(
    .AWVALID(m_axi_gmem1_AWVALID),
    .AWREADY(m_axi_gmem1_AWREADY),
    .AWADDR(m_axi_gmem1_AWADDR),
    .AWID(m_axi_gmem1_AWID),
    .AWLEN(m_axi_gmem1_AWLEN),
    .AWSIZE(m_axi_gmem1_AWSIZE),
    .AWBURST(m_axi_gmem1_AWBURST),
    .AWLOCK(m_axi_gmem1_AWLOCK),
    .AWCACHE(m_axi_gmem1_AWCACHE),
    .AWPROT(m_axi_gmem1_AWPROT),
    .AWQOS(m_axi_gmem1_AWQOS),
    .AWREGION(m_axi_gmem1_AWREGION),
    .AWUSER(m_axi_gmem1_AWUSER),
    .WVALID(m_axi_gmem1_WVALID),
    .WREADY(m_axi_gmem1_WREADY),
    .WDATA(m_axi_gmem1_WDATA),
    .WSTRB(m_axi_gmem1_WSTRB),
    .WLAST(m_axi_gmem1_WLAST),
    .WID(m_axi_gmem1_WID),
    .WUSER(m_axi_gmem1_WUSER),
    .ARVALID(m_axi_gmem1_ARVALID),
    .ARREADY(m_axi_gmem1_ARREADY),
    .ARADDR(m_axi_gmem1_ARADDR),
    .ARID(m_axi_gmem1_ARID),
    .ARLEN(m_axi_gmem1_ARLEN),
    .ARSIZE(m_axi_gmem1_ARSIZE),
    .ARBURST(m_axi_gmem1_ARBURST),
    .ARLOCK(m_axi_gmem1_ARLOCK),
    .ARCACHE(m_axi_gmem1_ARCACHE),
    .ARPROT(m_axi_gmem1_ARPROT),
    .ARQOS(m_axi_gmem1_ARQOS),
    .ARREGION(m_axi_gmem1_ARREGION),
    .ARUSER(m_axi_gmem1_ARUSER),
    .RVALID(m_axi_gmem1_RVALID),
    .RREADY(m_axi_gmem1_RREADY),
    .RDATA(m_axi_gmem1_RDATA),
    .RLAST(m_axi_gmem1_RLAST),
    .RID(m_axi_gmem1_RID),
    .RUSER(m_axi_gmem1_RUSER),
    .RRESP(m_axi_gmem1_RRESP),
    .BVALID(m_axi_gmem1_BVALID),
    .BREADY(m_axi_gmem1_BREADY),
    .BRESP(m_axi_gmem1_BRESP),
    .BID(m_axi_gmem1_BID),
    .BUSER(m_axi_gmem1_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(gmem1_ARVALID),
    .I_ARREADY(gmem1_ARREADY),
    .I_ARADDR(gmem1_ARADDR),
    .I_ARID(1'd0),
    .I_ARLEN(gmem1_ARLEN),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(gmem1_RVALID),
    .I_RREADY(gmem1_RREADY),
    .I_RDATA(gmem1_RDATA),
    .I_RID(gmem1_RID),
    .I_RUSER(gmem1_RUSER),
    .I_RRESP(gmem1_RRESP),
    .I_RLAST(gmem1_RLAST),
    .I_AWVALID(1'b0),
    .I_AWREADY(gmem1_AWREADY),
    .I_AWADDR(64'd0),
    .I_AWID(1'd0),
    .I_AWLEN(32'd0),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(1'b0),
    .I_WREADY(gmem1_WREADY),
    .I_WDATA(8'd0),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(1'd0),
    .I_BVALID(gmem1_BVALID),
    .I_BREADY(1'b0),
    .I_BRESP(gmem1_BRESP),
    .I_BID(gmem1_BID),
    .I_BUSER(gmem1_BUSER)
);

compute_matrices_gmem2_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 32 ),
    .USER_AW( 64 ),
    .USER_MAXREQS( 69 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_GMEM2_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_GMEM2_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_GMEM2_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_GMEM2_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_GMEM2_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_GMEM2_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_GMEM2_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_GMEM2_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_GMEM2_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_GMEM2_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_GMEM2_CACHE_VALUE ))
gmem2_m_axi_U(
    .AWVALID(m_axi_gmem2_AWVALID),
    .AWREADY(m_axi_gmem2_AWREADY),
    .AWADDR(m_axi_gmem2_AWADDR),
    .AWID(m_axi_gmem2_AWID),
    .AWLEN(m_axi_gmem2_AWLEN),
    .AWSIZE(m_axi_gmem2_AWSIZE),
    .AWBURST(m_axi_gmem2_AWBURST),
    .AWLOCK(m_axi_gmem2_AWLOCK),
    .AWCACHE(m_axi_gmem2_AWCACHE),
    .AWPROT(m_axi_gmem2_AWPROT),
    .AWQOS(m_axi_gmem2_AWQOS),
    .AWREGION(m_axi_gmem2_AWREGION),
    .AWUSER(m_axi_gmem2_AWUSER),
    .WVALID(m_axi_gmem2_WVALID),
    .WREADY(m_axi_gmem2_WREADY),
    .WDATA(m_axi_gmem2_WDATA),
    .WSTRB(m_axi_gmem2_WSTRB),
    .WLAST(m_axi_gmem2_WLAST),
    .WID(m_axi_gmem2_WID),
    .WUSER(m_axi_gmem2_WUSER),
    .ARVALID(m_axi_gmem2_ARVALID),
    .ARREADY(m_axi_gmem2_ARREADY),
    .ARADDR(m_axi_gmem2_ARADDR),
    .ARID(m_axi_gmem2_ARID),
    .ARLEN(m_axi_gmem2_ARLEN),
    .ARSIZE(m_axi_gmem2_ARSIZE),
    .ARBURST(m_axi_gmem2_ARBURST),
    .ARLOCK(m_axi_gmem2_ARLOCK),
    .ARCACHE(m_axi_gmem2_ARCACHE),
    .ARPROT(m_axi_gmem2_ARPROT),
    .ARQOS(m_axi_gmem2_ARQOS),
    .ARREGION(m_axi_gmem2_ARREGION),
    .ARUSER(m_axi_gmem2_ARUSER),
    .RVALID(m_axi_gmem2_RVALID),
    .RREADY(m_axi_gmem2_RREADY),
    .RDATA(m_axi_gmem2_RDATA),
    .RLAST(m_axi_gmem2_RLAST),
    .RID(m_axi_gmem2_RID),
    .RUSER(m_axi_gmem2_RUSER),
    .RRESP(m_axi_gmem2_RRESP),
    .BVALID(m_axi_gmem2_BVALID),
    .BREADY(m_axi_gmem2_BREADY),
    .BRESP(m_axi_gmem2_BRESP),
    .BID(m_axi_gmem2_BID),
    .BUSER(m_axi_gmem2_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(1'b0),
    .I_ARREADY(gmem2_ARREADY),
    .I_ARADDR(64'd0),
    .I_ARID(1'd0),
    .I_ARLEN(32'd0),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(gmem2_RVALID),
    .I_RREADY(1'b0),
    .I_RDATA(gmem2_RDATA),
    .I_RID(gmem2_RID),
    .I_RUSER(gmem2_RUSER),
    .I_RRESP(gmem2_RRESP),
    .I_RLAST(gmem2_RLAST),
    .I_AWVALID(gmem2_AWVALID),
    .I_AWREADY(gmem2_AWREADY),
    .I_AWADDR(gmem2_AWADDR),
    .I_AWID(1'd0),
    .I_AWLEN(32'd1),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(gmem2_WVALID),
    .I_WREADY(gmem2_WREADY),
    .I_WDATA(gmem2_WDATA),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(gmem2_WSTRB),
    .I_BVALID(gmem2_BVALID),
    .I_BREADY(gmem2_BREADY),
    .I_BRESP(gmem2_BRESP),
    .I_BID(gmem2_BID),
    .I_BUSER(gmem2_BUSER)
);

compute_matrices_string1_0_V #(
    .DataWidth( 3 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
string1_0_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(string1_0_V_address0),
    .ce0(string1_0_V_ce0),
    .we0(string1_0_V_we0),
    .d0(empty_49_reg_1824),
    .q0(string1_0_V_q0)
);

compute_matrices_string1_0_V #(
    .DataWidth( 3 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
string1_1_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(string1_1_V_address0),
    .ce0(string1_1_V_ce0),
    .we0(string1_1_V_we0),
    .d0(empty_49_reg_1824),
    .q0(string1_1_V_q0)
);

compute_matrices_string2_0_V #(
    .DataWidth( 3 ),
    .AddressRange( 33023 ),
    .AddressWidth( 16 ))
string2_0_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(string2_0_V_address0),
    .ce0(string2_0_V_ce0),
    .we0(string2_0_V_we0),
    .d0(empty_52_reg_1882),
    .q0(string2_0_V_q0)
);

compute_matrices_string2_0_V #(
    .DataWidth( 3 ),
    .AddressRange( 33023 ),
    .AddressWidth( 16 ))
string2_1_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(string2_1_V_address0),
    .ce0(string2_1_V_ce0),
    .we0(string2_1_V_we0),
    .d0(empty_52_reg_1882),
    .q0(string2_1_V_q0)
);

compute_matrices_current_diag_0 #(
    .DataWidth( 32 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
current_diag_0_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(current_diag_0_address0),
    .ce0(current_diag_0_ce0),
    .we0(current_diag_0_we0),
    .d0(current_diag_0_d0),
    .q0(current_diag_0_q0)
);

compute_matrices_current_diag_0 #(
    .DataWidth( 32 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
current_diag_1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(current_diag_1_address0),
    .ce0(current_diag_1_ce0),
    .we0(current_diag_1_we0),
    .d0(current_diag_1_d0),
    .q0(current_diag_1_q0)
);

compute_matrices_up_diag_0 #(
    .DataWidth( 32 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
up_diag_0_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(up_diag_0_address0),
    .ce0(up_diag_0_ce0),
    .we0(up_diag_0_we0),
    .d0(up_diag_0_d0),
    .q0(up_diag_0_q0),
    .address1(up_diag_0_address1),
    .ce1(up_diag_0_ce1),
    .q1(up_diag_0_q1)
);

compute_matrices_up_diag_0 #(
    .DataWidth( 32 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
up_diag_1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(up_diag_1_address0),
    .ce0(up_diag_1_ce0),
    .we0(up_diag_1_we0),
    .d0(up_diag_1_d0),
    .q0(up_diag_1_q0),
    .address1(up_diag_1_address1),
    .ce1(up_diag_1_ce1),
    .q1(up_diag_1_q1)
);

compute_matrices_upper_diag_0 #(
    .DataWidth( 32 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
upper_diag_0_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(upper_diag_0_address0),
    .ce0(upper_diag_0_ce0),
    .we0(upper_diag_0_we0),
    .d0(upper_diag_0_d0),
    .q0(upper_diag_0_q0)
);

compute_matrices_upper_diag_0 #(
    .DataWidth( 32 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
upper_diag_1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(upper_diag_1_address0),
    .ce0(upper_diag_1_ce0),
    .we0(upper_diag_1_we0),
    .d0(upper_diag_1_d0),
    .q0(upper_diag_1_q0)
);

compute_matrices_direction_diag_0_V #(
    .DataWidth( 2 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
direction_diag_0_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(direction_diag_0_V_address0),
    .ce0(direction_diag_0_V_ce0),
    .we0(direction_diag_0_V_we0),
    .d0(dir_1_fu_1410_p3),
    .q0(direction_diag_0_V_q0)
);

compute_matrices_direction_diag_0_V #(
    .DataWidth( 2 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
direction_diag_1_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(direction_diag_1_V_address0),
    .ce0(direction_diag_1_V_ce0),
    .we0(direction_diag_1_V_we0),
    .d0(dir_1_fu_1410_p3),
    .q0(direction_diag_1_V_q0)
);

compute_matrices_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(add_ln91_reg_1830),
    .din1(n),
    .ce(1'b1),
    .dout(grp_fu_1025_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((gmem2_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state309))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp3_stage0_subdone) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b1 == ap_condition_pp3_exit_iter0_state78))) begin
            ap_enable_reg_pp3_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state77)) begin
            ap_enable_reg_pp3_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp3_exit_iter0_state78)) begin
                ap_enable_reg_pp3_iter1 <= (1'b1 ^ ap_condition_pp3_exit_iter0_state78);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter2 <= ap_enable_reg_pp3_iter1;
        end else if ((1'b1 == ap_CS_fsm_state77)) begin
            ap_enable_reg_pp3_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp4_stage0_subdone) & (1'b1 == ap_CS_fsm_pp4_stage0) & (1'b1 == ap_condition_pp4_exit_iter0_state153))) begin
            ap_enable_reg_pp4_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state152)) begin
            ap_enable_reg_pp4_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp4_exit_iter0_state153)) begin
                ap_enable_reg_pp4_iter1 <= (1'b1 ^ ap_condition_pp4_exit_iter0_state153);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp4_iter1 <= ap_enable_reg_pp4_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            ap_enable_reg_pp4_iter2 <= ap_enable_reg_pp4_iter1;
        end else if ((1'b1 == ap_CS_fsm_state152)) begin
            ap_enable_reg_pp4_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    ap_rst_n_inv <= ap_rst_reg_1;
end

always @ (posedge ap_clk) begin
    ap_rst_reg_1 <= ap_rst_reg_2;
end

always @ (posedge ap_clk) begin
    ap_rst_reg_2 <= ~ap_rst_n;
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        empty_39_reg_664 <= 9'd0;
    end else if (((1'b1 == ap_CS_fsm_state4) & (exitcond7713_fu_846_p2 == 1'd0))) begin
        empty_39_reg_664 <= empty_40_fu_840_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        empty_43_reg_675 <= 9'd0;
    end else if (((1'b1 == ap_CS_fsm_state6) & (exitcond7612_fu_878_p2 == 1'd0))) begin
        empty_43_reg_675 <= empty_44_fu_872_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond7814_fu_808_p2 == 1'd0))) begin
        empty_reg_653 <= empty_36_fu_802_p2;
    end else if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        empty_reg_653 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state157)) begin
        i_reg_708 <= 32'd0;
    end else if (((1'b1 == ap_CS_fsm_state169) & (exitcond_fu_1607_p2 == 1'd1))) begin
        i_reg_708 <= add_ln95_1_reg_1918;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_1_fu_1126_p3 == 1'd0) & (icmp_ln102_fu_1134_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state159))) begin
        index_1_reg_753 <= index_reg_743;
    end else if (((icmp_ln102_reg_1965 == 1'd1) & (1'b1 == ap_CS_fsm_state163))) begin
        index_1_reg_753 <= index_2_reg_2071;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state164)) begin
        index_reg_743 <= index_1_reg_753;
    end else if (((icmp_ln95_fu_1057_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state158))) begin
        index_reg_743 <= trunc_ln101_fu_1090_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state164)) begin
        j_reg_731 <= j_1_reg_2086;
    end else if (((icmp_ln95_fu_1057_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state158))) begin
        j_reg_731 <= 9'd255;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond5_fu_1482_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state165))) begin
        loop_index43_reg_776 <= 62'd0;
    end else if ((1'b1 == ap_CS_fsm_state168)) begin
        loop_index43_reg_776 <= empty_60_reg_2124;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_1_fu_1126_p3 == 1'd1) & (icmp_ln90_reg_1789 == 1'd0) & (1'b1 == ap_CS_fsm_state159))) begin
        loop_index49_reg_765 <= 62'd0;
    end else if ((1'b1 == ap_CS_fsm_state166)) begin
        loop_index49_reg_765 <= empty_57_reg_2091;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state152)) begin
        loop_index55_reg_697 <= 64'd0;
    end else if (((exitcond7410_fu_997_p2 == 1'd0) & (ap_enable_reg_pp4_iter0 == 1'b1) & (1'b0 == ap_block_pp4_stage0_11001) & (1'b1 == ap_CS_fsm_pp4_stage0))) begin
        loop_index55_reg_697 <= empty_51_fu_991_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state77)) begin
        loop_index61_reg_686 <= 64'd0;
    end else if (((exitcond7511_fu_924_p2 == 1'd0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        loop_index61_reg_686 <= empty_48_fu_918_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state167) & ((exitcond686_fu_1532_p2 == 1'd1) | (icmp_ln90_reg_1789 == 1'd1)))) begin
        loop_index_reg_787 <= 64'd0;
    end else if (((gmem2_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state239))) begin
        loop_index_reg_787 <= empty_64_reg_2166;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state156)) begin
        max_index_buf_fu_246 <= 32'd0;
    end else if (((icmp_ln102_reg_1965 == 1'd1) & (1'b1 == ap_CS_fsm_state163))) begin
        max_index_buf_fu_246 <= max_index_buf_2_reg_2076;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state156)) begin
        max_value_fu_250 <= 32'd0;
    end else if (((icmp_ln102_reg_1965 == 1'd1) & (1'b1 == ap_CS_fsm_state163))) begin
        max_value_fu_250 <= max_value_2_reg_2081;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state157)) begin
        phi_mul_reg_719 <= 64'd0;
    end else if (((1'b1 == ap_CS_fsm_state169) & (exitcond_fu_1607_p2 == 1'd1))) begin
        phi_mul_reg_719 <= add_ln95_2_reg_1923;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln95_fu_1057_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state158))) begin
        add_ln122_reg_1951 <= add_ln122_fu_1094_p2;
        zext_ln101_1_reg_1936[8] <= zext_ln101_1_fu_1082_p1[8];
        zext_ln101_2_reg_1941[8] <= zext_ln101_2_fu_1086_p1[8];
        zext_ln101_reg_1931[8] <= zext_ln101_fu_1078_p1[8];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state160)) begin
        add_ln66_reg_2044 <= add_ln66_fu_1330_p2;
        test_val_2_reg_2033 <= test_val_2_fu_1263_p3;
        test_val_3_reg_2049 <= test_val_3_fu_1344_p2;
        test_val_reg_2039 <= test_val_fu_1324_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state82)) begin
        add_ln91_1_reg_1838 <= add_ln91_1_fu_962_p2;
        icmp_ln91_reg_1844 <= icmp_ln91_fu_967_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state83)) begin
        add_ln91_2_reg_1848 <= add_ln91_2_fu_976_p2;
        sext_ln91_reg_1853 <= sext_ln91_fu_982_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state81)) begin
        add_ln91_reg_1830 <= add_ln91_fu_952_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state158)) begin
        add_ln95_1_reg_1918 <= add_ln95_1_fu_1046_p2;
        add_ln95_2_reg_1923 <= add_ln95_2_fu_1052_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state157)) begin
        add_ln95_reg_1913 <= add_ln95_fu_1042_p2;
        mul54_reg_1902 <= grp_fu_1025_p2;
        mul68_cast_reg_1907 <= mul68_cast_fu_1039_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state167) & ((exitcond686_fu_1532_p2 == 1'd1) | (icmp_ln90_reg_1789 == 1'd1)))) begin
        add_ln98_reg_2156 <= add_ln98_fu_1578_p2;
        empty_73_reg_2161 <= empty_73_fu_1583_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        direction_matrix_read_reg_1736 <= direction_matrix;
        max_index_read_reg_1741 <= max_index;
        string1_mem_read_reg_1751 <= string1_mem;
        string2_mem_read_reg_1746 <= string2_mem;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        empty_49_reg_1824 <= empty_49_fu_943_p1;
        empty_50_reg_1815_pp3_iter1_reg <= empty_50_reg_1815;
        newIndex_reg_1819_pp3_iter1_reg <= newIndex_reg_1819;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond7511_fu_924_p2 == 1'd0) & (1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        empty_50_reg_1815 <= empty_50_fu_929_p1;
        newIndex_reg_1819 <= {{loop_index61_reg_686[7:1]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp4_stage0_11001) & (1'b1 == ap_CS_fsm_pp4_stage0))) begin
        empty_52_reg_1882 <= empty_52_fu_1016_p1;
        empty_53_reg_1873_pp4_iter1_reg <= empty_53_reg_1873;
        newIndex3_reg_1877_pp4_iter1_reg <= newIndex3_reg_1877;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond7410_fu_997_p2 == 1'd0) & (1'b0 == ap_block_pp4_stage0_11001) & (1'b1 == ap_CS_fsm_pp4_stage0))) begin
        empty_53_reg_1873 <= empty_53_fu_1002_p1;
        newIndex3_reg_1877 <= {{loop_index55_reg_697[16:1]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state165)) begin
        empty_57_reg_2091 <= empty_57_fu_1476_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond5_fu_1482_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state165))) begin
        empty_59_reg_2099 <= empty_59_fu_1487_p1;
        upper_diag_0_addr_2_reg_2114 <= newIndex71_cast_fu_1501_p1;
        upper_diag_1_addr_2_reg_2119 <= newIndex71_cast_fu_1501_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln90_reg_1789 == 1'd0) & (1'b1 == ap_CS_fsm_state167))) begin
        empty_60_reg_2124 <= empty_60_fu_1518_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond686_fu_1532_p2 == 1'd0) & (icmp_ln90_reg_1789 == 1'd0) & (1'b1 == ap_CS_fsm_state167))) begin
        empty_63_reg_2147 <= empty_63_fu_1564_p1;
        icmp29_reg_2142 <= icmp29_fu_1558_p2;
        newIndex5_reg_2151 <= {{loop_index43_reg_776[7:1]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state169)) begin
        empty_64_reg_2166 <= empty_64_fu_1601_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state169) & (exitcond_fu_1607_p2 == 1'd0))) begin
        empty_68_reg_2189 <= empty_68_fu_1652_p2;
        gmem2_addr_1_reg_2195 <= p_cast10_cast_fu_1667_p1;
        icmp32_reg_2184 <= icmp32_fu_1637_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state170)) begin
        empty_69_reg_2201 <= empty_69_fu_1691_p2;
        empty_70_reg_2206 <= empty_70_fu_1708_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln95_fu_1057_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state158))) begin
        gmem2_addr_reg_1956 <= sext_ln159_fu_1108_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_1_fu_1126_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state159))) begin
        icmp_ln102_reg_1965 <= icmp_ln102_fu_1134_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state161)) begin
        icmp_ln123_reg_2055 <= icmp_ln123_fu_1350_p2;
        icmp_ln131_reg_2060 <= icmp_ln131_fu_1366_p2;
        val_2_reg_2065 <= val_2_fu_1371_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_1_fu_1126_p3 == 1'd0) & (icmp_ln102_fu_1134_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state159))) begin
        icmp_ln150_reg_2029 <= icmp_ln150_fu_1225_p2;
        sub_ln122_reg_1994 <= sub_ln122_fu_1171_p2;
        trunc_ln101_1_reg_1969 <= trunc_ln101_1_fu_1139_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        icmp_ln90_reg_1789 <= icmp_ln90_fu_904_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state162)) begin
        index_2_reg_2071 <= index_2_fu_1381_p2;
        max_index_buf_2_reg_2076 <= max_index_buf_2_fu_1439_p3;
        max_value_2_reg_2081 <= max_value_2_fu_1447_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state163)) begin
        j_1_reg_2086 <= j_1_fu_1470_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        sext_ln90_reg_1793 <= sext_ln90_fu_909_p1;
    end
end

always @ (*) begin
    if ((exitcond7511_fu_924_p2 == 1'd1)) begin
        ap_condition_pp3_exit_iter0_state78 = 1'b1;
    end else begin
        ap_condition_pp3_exit_iter0_state78 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond7410_fu_997_p2 == 1'd1)) begin
        ap_condition_pp4_exit_iter0_state153 = 1'b1;
    end else begin
        ap_condition_pp4_exit_iter0_state153 = 1'b0;
    end
end

always @ (*) begin
    if (((gmem2_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state309))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter0 == 1'b0) & (ap_enable_reg_pp3_iter1 == 1'b0) & (ap_enable_reg_pp3_iter2 == 1'b0))) begin
        ap_idle_pp3 = 1'b1;
    end else begin
        ap_idle_pp3 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp4_iter0 == 1'b0) & (ap_enable_reg_pp4_iter1 == 1'b0) & (ap_enable_reg_pp4_iter2 == 1'b0))) begin
        ap_idle_pp4 = 1'b1;
    end else begin
        ap_idle_pp4 = 1'b0;
    end
end

always @ (*) begin
    if (((gmem2_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state309))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state167)) begin
        current_diag_0_address0 = newIndex45_fu_1542_p1;
    end else if ((1'b1 == ap_CS_fsm_state162)) begin
        current_diag_0_address0 = zext_ln150_fu_1455_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        current_diag_0_address0 = newIndex59_fu_818_p1;
    end else begin
        current_diag_0_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state167) | (1'b1 == ap_CS_fsm_state162) | (1'b1 == ap_CS_fsm_state2))) begin
        current_diag_0_ce0 = 1'b1;
    end else begin
        current_diag_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state162)) begin
        current_diag_0_d0 = max_value_3_fu_1420_p3;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        current_diag_0_d0 = 32'd0;
    end else begin
        current_diag_0_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state2) & (icmp_fu_834_p2 == 1'd1) & (exitcond7814_fu_808_p2 == 1'd0)) | ((icmp_ln150_reg_2029 == 1'd1) & (1'b1 == ap_CS_fsm_state162)))) begin
        current_diag_0_we0 = 1'b1;
    end else begin
        current_diag_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state167)) begin
        current_diag_1_address0 = newIndex45_fu_1542_p1;
    end else if ((1'b1 == ap_CS_fsm_state162)) begin
        current_diag_1_address0 = zext_ln150_fu_1455_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        current_diag_1_address0 = newIndex59_fu_818_p1;
    end else begin
        current_diag_1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state167) | (1'b1 == ap_CS_fsm_state162) | (1'b1 == ap_CS_fsm_state2))) begin
        current_diag_1_ce0 = 1'b1;
    end else begin
        current_diag_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state162)) begin
        current_diag_1_d0 = max_value_3_fu_1420_p3;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        current_diag_1_d0 = 32'd0;
    end else begin
        current_diag_1_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state2) & (icmp_fu_834_p2 == 1'd0) & (exitcond7814_fu_808_p2 == 1'd0)) | ((icmp_ln150_reg_2029 == 1'd0) & (1'b1 == ap_CS_fsm_state162)))) begin
        current_diag_1_we0 = 1'b1;
    end else begin
        current_diag_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state169)) begin
        direction_diag_0_V_address0 = newIndex125_fu_1621_p1;
    end else if ((1'b1 == ap_CS_fsm_state162)) begin
        direction_diag_0_V_address0 = zext_ln150_fu_1455_p1;
    end else begin
        direction_diag_0_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state162) | (1'b1 == ap_CS_fsm_state169))) begin
        direction_diag_0_V_ce0 = 1'b1;
    end else begin
        direction_diag_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln150_reg_2029 == 1'd1) & (1'b1 == ap_CS_fsm_state162))) begin
        direction_diag_0_V_we0 = 1'b1;
    end else begin
        direction_diag_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state169)) begin
        direction_diag_1_V_address0 = newIndex125_fu_1621_p1;
    end else if ((1'b1 == ap_CS_fsm_state162)) begin
        direction_diag_1_V_address0 = zext_ln150_fu_1455_p1;
    end else begin
        direction_diag_1_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state162) | (1'b1 == ap_CS_fsm_state169))) begin
        direction_diag_1_V_ce0 = 1'b1;
    end else begin
        direction_diag_1_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln150_reg_2029 == 1'd0) & (1'b1 == ap_CS_fsm_state162))) begin
        direction_diag_1_V_we0 = 1'b1;
    end else begin
        direction_diag_1_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln91_reg_1844 == 1'd0) & (1'b0 == ap_block_state83_io) & (1'b1 == ap_CS_fsm_state83))) begin
        gmem1_ARADDR = string2_mem_read_reg_1746;
    end else if (((1'b0 == ap_block_state8_io) & (icmp_ln90_reg_1789 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
        gmem1_ARADDR = string1_mem_read_reg_1751;
    end else begin
        gmem1_ARADDR = 'bx;
    end
end

always @ (*) begin
    if (((icmp_ln91_reg_1844 == 1'd0) & (1'b0 == ap_block_state83_io) & (1'b1 == ap_CS_fsm_state83))) begin
        gmem1_ARLEN = add_ln91_1_reg_1838;
    end else if (((1'b0 == ap_block_state8_io) & (icmp_ln90_reg_1789 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
        gmem1_ARLEN = n;
    end else begin
        gmem1_ARLEN = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln91_reg_1844 == 1'd0) & (1'b0 == ap_block_state83_io) & (1'b1 == ap_CS_fsm_state83)) | ((1'b0 == ap_block_state8_io) & (icmp_ln90_reg_1789 == 1'd0) & (1'b1 == ap_CS_fsm_state8)))) begin
        gmem1_ARVALID = 1'b1;
    end else begin
        gmem1_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0)) | ((ap_enable_reg_pp4_iter1 == 1'b1) & (1'b0 == ap_block_pp4_stage0_11001) & (1'b1 == ap_CS_fsm_pp4_stage0)))) begin
        gmem1_RREADY = 1'b1;
    end else begin
        gmem1_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln91_reg_1844 == 1'd0) & (1'b1 == ap_CS_fsm_state83)) | ((icmp_ln90_reg_1789 == 1'd0) & (1'b1 == ap_CS_fsm_state8)))) begin
        gmem1_blk_n_AR = m_axi_gmem1_ARREADY;
    end else begin
        gmem1_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp4_iter1 == 1'b1) & (1'b0 == ap_block_pp4_stage0) & (1'b1 == ap_CS_fsm_pp4_stage0)) | ((1'b0 == ap_block_pp3_stage0) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0)))) begin
        gmem1_blk_n_R = m_axi_gmem1_RVALID;
    end else begin
        gmem1_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((gmem2_AWREADY == 1'b1)) begin
        if ((1'b1 == ap_CS_fsm_state240)) begin
            gmem2_AWADDR = gmem2_addr_reg_1956;
        end else if ((1'b1 == ap_CS_fsm_state170)) begin
            gmem2_AWADDR = gmem2_addr_1_reg_2195;
        end else begin
            gmem2_AWADDR = 'bx;
        end
    end else begin
        gmem2_AWADDR = 'bx;
    end
end

always @ (*) begin
    if ((((gmem2_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state240)) | ((gmem2_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state170)))) begin
        gmem2_AWVALID = 1'b1;
    end else begin
        gmem2_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((gmem2_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state309)) | ((gmem2_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state239)))) begin
        gmem2_BREADY = 1'b1;
    end else begin
        gmem2_BREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state241)) begin
        gmem2_WDATA = max_index_buf_fu_246;
    end else if ((1'b1 == ap_CS_fsm_state171)) begin
        gmem2_WDATA = p_cast19_fu_1714_p1;
    end else begin
        gmem2_WDATA = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state241)) begin
        gmem2_WSTRB = 4'd15;
    end else if ((1'b1 == ap_CS_fsm_state171)) begin
        gmem2_WSTRB = empty_69_reg_2201;
    end else begin
        gmem2_WSTRB = 'bx;
    end
end

always @ (*) begin
    if ((((gmem2_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state241)) | ((gmem2_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state171)))) begin
        gmem2_WVALID = 1'b1;
    end else begin
        gmem2_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state240) | (1'b1 == ap_CS_fsm_state170))) begin
        gmem2_blk_n_AW = m_axi_gmem2_AWREADY;
    end else begin
        gmem2_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state309) | (1'b1 == ap_CS_fsm_state239))) begin
        gmem2_blk_n_B = m_axi_gmem2_BVALID;
    end else begin
        gmem2_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state241) | (1'b1 == ap_CS_fsm_state171))) begin
        gmem2_blk_n_W = m_axi_gmem2_WREADY;
    end else begin
        gmem2_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state159)) begin
        string1_0_V_address0 = zext_ln870_1_fu_1186_p1;
    end else if (((1'b0 == ap_block_pp3_stage0) & (ap_enable_reg_pp3_iter2 == 1'b1))) begin
        string1_0_V_address0 = newIndex_cast_fu_947_p1;
    end else begin
        string1_0_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state159) | ((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter2 == 1'b1)))) begin
        string1_0_V_ce0 = 1'b1;
    end else begin
        string1_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((empty_50_reg_1815_pp3_iter1_reg == 1'd0) & (1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter2 == 1'b1))) begin
        string1_0_V_we0 = 1'b1;
    end else begin
        string1_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state159)) begin
        string1_1_V_address0 = zext_ln870_1_fu_1186_p1;
    end else if (((1'b0 == ap_block_pp3_stage0) & (ap_enable_reg_pp3_iter2 == 1'b1))) begin
        string1_1_V_address0 = newIndex_cast_fu_947_p1;
    end else begin
        string1_1_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state159) | ((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter2 == 1'b1)))) begin
        string1_1_V_ce0 = 1'b1;
    end else begin
        string1_1_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((empty_50_reg_1815_pp3_iter1_reg == 1'd1) & (1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter2 == 1'b1))) begin
        string1_1_V_we0 = 1'b1;
    end else begin
        string1_1_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state159)) begin
        string2_0_V_address0 = zext_ln870_fu_1204_p1;
    end else if (((1'b0 == ap_block_pp4_stage0) & (ap_enable_reg_pp4_iter2 == 1'b1))) begin
        string2_0_V_address0 = newIndex31_cast_fu_1020_p1;
    end else begin
        string2_0_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state159) | ((1'b0 == ap_block_pp4_stage0_11001) & (ap_enable_reg_pp4_iter2 == 1'b1)))) begin
        string2_0_V_ce0 = 1'b1;
    end else begin
        string2_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((empty_53_reg_1873_pp4_iter1_reg == 1'd0) & (1'b0 == ap_block_pp4_stage0_11001) & (ap_enable_reg_pp4_iter2 == 1'b1))) begin
        string2_0_V_we0 = 1'b1;
    end else begin
        string2_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state159)) begin
        string2_1_V_address0 = zext_ln870_fu_1204_p1;
    end else if (((1'b0 == ap_block_pp4_stage0) & (ap_enable_reg_pp4_iter2 == 1'b1))) begin
        string2_1_V_address0 = newIndex31_cast_fu_1020_p1;
    end else begin
        string2_1_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state159) | ((1'b0 == ap_block_pp4_stage0_11001) & (ap_enable_reg_pp4_iter2 == 1'b1)))) begin
        string2_1_V_ce0 = 1'b1;
    end else begin
        string2_1_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((empty_53_reg_1873_pp4_iter1_reg == 1'd1) & (1'b0 == ap_block_pp4_stage0_11001) & (ap_enable_reg_pp4_iter2 == 1'b1))) begin
        string2_1_V_we0 = 1'b1;
    end else begin
        string2_1_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state168)) begin
        up_diag_0_address0 = newIndex65_cast_fu_1596_p1;
    end else if ((1'b1 == ap_CS_fsm_state165)) begin
        up_diag_0_address0 = newIndex71_cast_fu_1501_p1;
    end else if ((1'b1 == ap_CS_fsm_state159)) begin
        up_diag_0_address0 = zext_ln870_1_fu_1186_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        up_diag_0_address0 = newIndex94_cast_fu_866_p1;
    end else begin
        up_diag_0_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state165) | (1'b1 == ap_CS_fsm_state159) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state168))) begin
        up_diag_0_ce0 = 1'b1;
    end else begin
        up_diag_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state159)) begin
        up_diag_0_ce1 = 1'b1;
    end else begin
        up_diag_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state168)) begin
        up_diag_0_d0 = current_diag_load_phi_fu_1587_p3;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        up_diag_0_d0 = 32'd0;
    end else begin
        up_diag_0_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state4) & (empty_42_fu_852_p1 == 1'd0) & (exitcond7713_fu_846_p2 == 1'd0)) | ((empty_63_reg_2147 == 1'd0) & (1'b1 == ap_CS_fsm_state168)))) begin
        up_diag_0_we0 = 1'b1;
    end else begin
        up_diag_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state168)) begin
        up_diag_1_address0 = newIndex65_cast_fu_1596_p1;
    end else if ((1'b1 == ap_CS_fsm_state165)) begin
        up_diag_1_address0 = newIndex71_cast_fu_1501_p1;
    end else if ((1'b1 == ap_CS_fsm_state159)) begin
        up_diag_1_address0 = zext_ln870_1_fu_1186_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        up_diag_1_address0 = newIndex94_cast_fu_866_p1;
    end else begin
        up_diag_1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state165) | (1'b1 == ap_CS_fsm_state159) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state168))) begin
        up_diag_1_ce0 = 1'b1;
    end else begin
        up_diag_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state159)) begin
        up_diag_1_ce1 = 1'b1;
    end else begin
        up_diag_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state168)) begin
        up_diag_1_d0 = current_diag_load_phi_fu_1587_p3;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        up_diag_1_d0 = 32'd0;
    end else begin
        up_diag_1_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state4) & (empty_42_fu_852_p1 == 1'd1) & (exitcond7713_fu_846_p2 == 1'd0)) | ((empty_63_reg_2147 == 1'd1) & (1'b1 == ap_CS_fsm_state168)))) begin
        up_diag_1_we0 = 1'b1;
    end else begin
        up_diag_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state166)) begin
        upper_diag_0_address0 = upper_diag_0_addr_2_reg_2114;
    end else if ((1'b1 == ap_CS_fsm_state159)) begin
        upper_diag_0_address0 = zext_ln113_fu_1159_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        upper_diag_0_address0 = newIndex113_cast_fu_898_p1;
    end else begin
        upper_diag_0_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state159) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state166))) begin
        upper_diag_0_ce0 = 1'b1;
    end else begin
        upper_diag_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state166)) begin
        upper_diag_0_d0 = up_diag_load_phi_fu_1509_p3;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        upper_diag_0_d0 = 32'd0;
    end else begin
        upper_diag_0_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state6) & (empty_46_fu_884_p1 == 1'd0) & (exitcond7612_fu_878_p2 == 1'd0)) | ((empty_59_reg_2099 == 1'd0) & (1'b1 == ap_CS_fsm_state166)))) begin
        upper_diag_0_we0 = 1'b1;
    end else begin
        upper_diag_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state166)) begin
        upper_diag_1_address0 = upper_diag_1_addr_2_reg_2119;
    end else if ((1'b1 == ap_CS_fsm_state159)) begin
        upper_diag_1_address0 = zext_ln113_fu_1159_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        upper_diag_1_address0 = newIndex113_cast_fu_898_p1;
    end else begin
        upper_diag_1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state159) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state166))) begin
        upper_diag_1_ce0 = 1'b1;
    end else begin
        upper_diag_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state166)) begin
        upper_diag_1_d0 = up_diag_load_phi_fu_1509_p3;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        upper_diag_1_d0 = 32'd0;
    end else begin
        upper_diag_1_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state6) & (empty_46_fu_884_p1 == 1'd1) & (exitcond7612_fu_878_p2 == 1'd0)) | ((empty_59_reg_2099 == 1'd1) & (1'b1 == ap_CS_fsm_state166)))) begin
        upper_diag_1_we0 = 1'b1;
    end else begin
        upper_diag_1_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond7814_fu_808_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (exitcond7713_fu_846_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (exitcond7612_fu_878_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            if (((1'b0 == ap_block_state8_io) & (icmp_ln90_reg_1789 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state81;
            end else if (((1'b0 == ap_block_state8_io) & (icmp_ln90_reg_1789 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state74;
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            ap_NS_fsm = ap_ST_fsm_state76;
        end
        ap_ST_fsm_state76 : begin
            ap_NS_fsm = ap_ST_fsm_state77;
        end
        ap_ST_fsm_state77 : begin
            ap_NS_fsm = ap_ST_fsm_pp3_stage0;
        end
        ap_ST_fsm_pp3_stage0 : begin
            if ((~((exitcond7511_fu_924_p2 == 1'd1) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b0 == ap_block_pp3_stage0_subdone) & (ap_enable_reg_pp3_iter1 == 1'b0)) & ~((1'b0 == ap_block_pp3_stage0_subdone) & (ap_enable_reg_pp3_iter1 == 1'b0) & (ap_enable_reg_pp3_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end else if ((((exitcond7511_fu_924_p2 == 1'd1) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b0 == ap_block_pp3_stage0_subdone) & (ap_enable_reg_pp3_iter1 == 1'b0)) | ((1'b0 == ap_block_pp3_stage0_subdone) & (ap_enable_reg_pp3_iter1 == 1'b0) & (ap_enable_reg_pp3_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state81;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end
        end
        ap_ST_fsm_state81 : begin
            ap_NS_fsm = ap_ST_fsm_state82;
        end
        ap_ST_fsm_state82 : begin
            ap_NS_fsm = ap_ST_fsm_state83;
        end
        ap_ST_fsm_state83 : begin
            if (((icmp_ln91_reg_1844 == 1'd1) & (1'b0 == ap_block_state83_io) & (1'b1 == ap_CS_fsm_state83))) begin
                ap_NS_fsm = ap_ST_fsm_state156;
            end else if (((icmp_ln91_reg_1844 == 1'd0) & (1'b0 == ap_block_state83_io) & (1'b1 == ap_CS_fsm_state83))) begin
                ap_NS_fsm = ap_ST_fsm_state84;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state83;
            end
        end
        ap_ST_fsm_state84 : begin
            ap_NS_fsm = ap_ST_fsm_state85;
        end
        ap_ST_fsm_state85 : begin
            ap_NS_fsm = ap_ST_fsm_state86;
        end
        ap_ST_fsm_state86 : begin
            ap_NS_fsm = ap_ST_fsm_state87;
        end
        ap_ST_fsm_state87 : begin
            ap_NS_fsm = ap_ST_fsm_state88;
        end
        ap_ST_fsm_state88 : begin
            ap_NS_fsm = ap_ST_fsm_state89;
        end
        ap_ST_fsm_state89 : begin
            ap_NS_fsm = ap_ST_fsm_state90;
        end
        ap_ST_fsm_state90 : begin
            ap_NS_fsm = ap_ST_fsm_state91;
        end
        ap_ST_fsm_state91 : begin
            ap_NS_fsm = ap_ST_fsm_state92;
        end
        ap_ST_fsm_state92 : begin
            ap_NS_fsm = ap_ST_fsm_state93;
        end
        ap_ST_fsm_state93 : begin
            ap_NS_fsm = ap_ST_fsm_state94;
        end
        ap_ST_fsm_state94 : begin
            ap_NS_fsm = ap_ST_fsm_state95;
        end
        ap_ST_fsm_state95 : begin
            ap_NS_fsm = ap_ST_fsm_state96;
        end
        ap_ST_fsm_state96 : begin
            ap_NS_fsm = ap_ST_fsm_state97;
        end
        ap_ST_fsm_state97 : begin
            ap_NS_fsm = ap_ST_fsm_state98;
        end
        ap_ST_fsm_state98 : begin
            ap_NS_fsm = ap_ST_fsm_state99;
        end
        ap_ST_fsm_state99 : begin
            ap_NS_fsm = ap_ST_fsm_state100;
        end
        ap_ST_fsm_state100 : begin
            ap_NS_fsm = ap_ST_fsm_state101;
        end
        ap_ST_fsm_state101 : begin
            ap_NS_fsm = ap_ST_fsm_state102;
        end
        ap_ST_fsm_state102 : begin
            ap_NS_fsm = ap_ST_fsm_state103;
        end
        ap_ST_fsm_state103 : begin
            ap_NS_fsm = ap_ST_fsm_state104;
        end
        ap_ST_fsm_state104 : begin
            ap_NS_fsm = ap_ST_fsm_state105;
        end
        ap_ST_fsm_state105 : begin
            ap_NS_fsm = ap_ST_fsm_state106;
        end
        ap_ST_fsm_state106 : begin
            ap_NS_fsm = ap_ST_fsm_state107;
        end
        ap_ST_fsm_state107 : begin
            ap_NS_fsm = ap_ST_fsm_state108;
        end
        ap_ST_fsm_state108 : begin
            ap_NS_fsm = ap_ST_fsm_state109;
        end
        ap_ST_fsm_state109 : begin
            ap_NS_fsm = ap_ST_fsm_state110;
        end
        ap_ST_fsm_state110 : begin
            ap_NS_fsm = ap_ST_fsm_state111;
        end
        ap_ST_fsm_state111 : begin
            ap_NS_fsm = ap_ST_fsm_state112;
        end
        ap_ST_fsm_state112 : begin
            ap_NS_fsm = ap_ST_fsm_state113;
        end
        ap_ST_fsm_state113 : begin
            ap_NS_fsm = ap_ST_fsm_state114;
        end
        ap_ST_fsm_state114 : begin
            ap_NS_fsm = ap_ST_fsm_state115;
        end
        ap_ST_fsm_state115 : begin
            ap_NS_fsm = ap_ST_fsm_state116;
        end
        ap_ST_fsm_state116 : begin
            ap_NS_fsm = ap_ST_fsm_state117;
        end
        ap_ST_fsm_state117 : begin
            ap_NS_fsm = ap_ST_fsm_state118;
        end
        ap_ST_fsm_state118 : begin
            ap_NS_fsm = ap_ST_fsm_state119;
        end
        ap_ST_fsm_state119 : begin
            ap_NS_fsm = ap_ST_fsm_state120;
        end
        ap_ST_fsm_state120 : begin
            ap_NS_fsm = ap_ST_fsm_state121;
        end
        ap_ST_fsm_state121 : begin
            ap_NS_fsm = ap_ST_fsm_state122;
        end
        ap_ST_fsm_state122 : begin
            ap_NS_fsm = ap_ST_fsm_state123;
        end
        ap_ST_fsm_state123 : begin
            ap_NS_fsm = ap_ST_fsm_state124;
        end
        ap_ST_fsm_state124 : begin
            ap_NS_fsm = ap_ST_fsm_state125;
        end
        ap_ST_fsm_state125 : begin
            ap_NS_fsm = ap_ST_fsm_state126;
        end
        ap_ST_fsm_state126 : begin
            ap_NS_fsm = ap_ST_fsm_state127;
        end
        ap_ST_fsm_state127 : begin
            ap_NS_fsm = ap_ST_fsm_state128;
        end
        ap_ST_fsm_state128 : begin
            ap_NS_fsm = ap_ST_fsm_state129;
        end
        ap_ST_fsm_state129 : begin
            ap_NS_fsm = ap_ST_fsm_state130;
        end
        ap_ST_fsm_state130 : begin
            ap_NS_fsm = ap_ST_fsm_state131;
        end
        ap_ST_fsm_state131 : begin
            ap_NS_fsm = ap_ST_fsm_state132;
        end
        ap_ST_fsm_state132 : begin
            ap_NS_fsm = ap_ST_fsm_state133;
        end
        ap_ST_fsm_state133 : begin
            ap_NS_fsm = ap_ST_fsm_state134;
        end
        ap_ST_fsm_state134 : begin
            ap_NS_fsm = ap_ST_fsm_state135;
        end
        ap_ST_fsm_state135 : begin
            ap_NS_fsm = ap_ST_fsm_state136;
        end
        ap_ST_fsm_state136 : begin
            ap_NS_fsm = ap_ST_fsm_state137;
        end
        ap_ST_fsm_state137 : begin
            ap_NS_fsm = ap_ST_fsm_state138;
        end
        ap_ST_fsm_state138 : begin
            ap_NS_fsm = ap_ST_fsm_state139;
        end
        ap_ST_fsm_state139 : begin
            ap_NS_fsm = ap_ST_fsm_state140;
        end
        ap_ST_fsm_state140 : begin
            ap_NS_fsm = ap_ST_fsm_state141;
        end
        ap_ST_fsm_state141 : begin
            ap_NS_fsm = ap_ST_fsm_state142;
        end
        ap_ST_fsm_state142 : begin
            ap_NS_fsm = ap_ST_fsm_state143;
        end
        ap_ST_fsm_state143 : begin
            ap_NS_fsm = ap_ST_fsm_state144;
        end
        ap_ST_fsm_state144 : begin
            ap_NS_fsm = ap_ST_fsm_state145;
        end
        ap_ST_fsm_state145 : begin
            ap_NS_fsm = ap_ST_fsm_state146;
        end
        ap_ST_fsm_state146 : begin
            ap_NS_fsm = ap_ST_fsm_state147;
        end
        ap_ST_fsm_state147 : begin
            ap_NS_fsm = ap_ST_fsm_state148;
        end
        ap_ST_fsm_state148 : begin
            ap_NS_fsm = ap_ST_fsm_state149;
        end
        ap_ST_fsm_state149 : begin
            ap_NS_fsm = ap_ST_fsm_state150;
        end
        ap_ST_fsm_state150 : begin
            ap_NS_fsm = ap_ST_fsm_state151;
        end
        ap_ST_fsm_state151 : begin
            ap_NS_fsm = ap_ST_fsm_state152;
        end
        ap_ST_fsm_state152 : begin
            ap_NS_fsm = ap_ST_fsm_pp4_stage0;
        end
        ap_ST_fsm_pp4_stage0 : begin
            if ((~((exitcond7410_fu_997_p2 == 1'd1) & (ap_enable_reg_pp4_iter0 == 1'b1) & (ap_enable_reg_pp4_iter1 == 1'b0) & (1'b0 == ap_block_pp4_stage0_subdone)) & ~((ap_enable_reg_pp4_iter1 == 1'b0) & (1'b0 == ap_block_pp4_stage0_subdone) & (ap_enable_reg_pp4_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage0;
            end else if ((((ap_enable_reg_pp4_iter1 == 1'b0) & (1'b0 == ap_block_pp4_stage0_subdone) & (ap_enable_reg_pp4_iter2 == 1'b1)) | ((exitcond7410_fu_997_p2 == 1'd1) & (ap_enable_reg_pp4_iter0 == 1'b1) & (ap_enable_reg_pp4_iter1 == 1'b0) & (1'b0 == ap_block_pp4_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state156;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage0;
            end
        end
        ap_ST_fsm_state156 : begin
            ap_NS_fsm = ap_ST_fsm_state157;
        end
        ap_ST_fsm_state157 : begin
            ap_NS_fsm = ap_ST_fsm_state158;
        end
        ap_ST_fsm_state158 : begin
            if (((icmp_ln95_fu_1057_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state158))) begin
                ap_NS_fsm = ap_ST_fsm_state159;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state240;
            end
        end
        ap_ST_fsm_state159 : begin
            if (((tmp_1_fu_1126_p3 == 1'd1) & (icmp_ln90_reg_1789 == 1'd0) & (1'b1 == ap_CS_fsm_state159))) begin
                ap_NS_fsm = ap_ST_fsm_state165;
            end else if (((tmp_1_fu_1126_p3 == 1'd1) & (icmp_ln90_reg_1789 == 1'd1) & (1'b1 == ap_CS_fsm_state159))) begin
                ap_NS_fsm = ap_ST_fsm_state167;
            end else if (((tmp_1_fu_1126_p3 == 1'd0) & (icmp_ln102_fu_1134_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state159))) begin
                ap_NS_fsm = ap_ST_fsm_state163;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state160;
            end
        end
        ap_ST_fsm_state160 : begin
            ap_NS_fsm = ap_ST_fsm_state161;
        end
        ap_ST_fsm_state161 : begin
            ap_NS_fsm = ap_ST_fsm_state162;
        end
        ap_ST_fsm_state162 : begin
            ap_NS_fsm = ap_ST_fsm_state163;
        end
        ap_ST_fsm_state163 : begin
            ap_NS_fsm = ap_ST_fsm_state164;
        end
        ap_ST_fsm_state164 : begin
            ap_NS_fsm = ap_ST_fsm_state159;
        end
        ap_ST_fsm_state165 : begin
            if (((exitcond5_fu_1482_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state165))) begin
                ap_NS_fsm = ap_ST_fsm_state167;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state166;
            end
        end
        ap_ST_fsm_state166 : begin
            ap_NS_fsm = ap_ST_fsm_state165;
        end
        ap_ST_fsm_state167 : begin
            if (((1'b1 == ap_CS_fsm_state167) & ((exitcond686_fu_1532_p2 == 1'd1) | (icmp_ln90_reg_1789 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state169;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state168;
            end
        end
        ap_ST_fsm_state168 : begin
            ap_NS_fsm = ap_ST_fsm_state167;
        end
        ap_ST_fsm_state169 : begin
            if (((1'b1 == ap_CS_fsm_state169) & (exitcond_fu_1607_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state158;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state170;
            end
        end
        ap_ST_fsm_state170 : begin
            if (((gmem2_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state170))) begin
                ap_NS_fsm = ap_ST_fsm_state171;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state170;
            end
        end
        ap_ST_fsm_state171 : begin
            if (((gmem2_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state171))) begin
                ap_NS_fsm = ap_ST_fsm_state172;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state171;
            end
        end
        ap_ST_fsm_state172 : begin
            ap_NS_fsm = ap_ST_fsm_state173;
        end
        ap_ST_fsm_state173 : begin
            ap_NS_fsm = ap_ST_fsm_state174;
        end
        ap_ST_fsm_state174 : begin
            ap_NS_fsm = ap_ST_fsm_state175;
        end
        ap_ST_fsm_state175 : begin
            ap_NS_fsm = ap_ST_fsm_state176;
        end
        ap_ST_fsm_state176 : begin
            ap_NS_fsm = ap_ST_fsm_state177;
        end
        ap_ST_fsm_state177 : begin
            ap_NS_fsm = ap_ST_fsm_state178;
        end
        ap_ST_fsm_state178 : begin
            ap_NS_fsm = ap_ST_fsm_state179;
        end
        ap_ST_fsm_state179 : begin
            ap_NS_fsm = ap_ST_fsm_state180;
        end
        ap_ST_fsm_state180 : begin
            ap_NS_fsm = ap_ST_fsm_state181;
        end
        ap_ST_fsm_state181 : begin
            ap_NS_fsm = ap_ST_fsm_state182;
        end
        ap_ST_fsm_state182 : begin
            ap_NS_fsm = ap_ST_fsm_state183;
        end
        ap_ST_fsm_state183 : begin
            ap_NS_fsm = ap_ST_fsm_state184;
        end
        ap_ST_fsm_state184 : begin
            ap_NS_fsm = ap_ST_fsm_state185;
        end
        ap_ST_fsm_state185 : begin
            ap_NS_fsm = ap_ST_fsm_state186;
        end
        ap_ST_fsm_state186 : begin
            ap_NS_fsm = ap_ST_fsm_state187;
        end
        ap_ST_fsm_state187 : begin
            ap_NS_fsm = ap_ST_fsm_state188;
        end
        ap_ST_fsm_state188 : begin
            ap_NS_fsm = ap_ST_fsm_state189;
        end
        ap_ST_fsm_state189 : begin
            ap_NS_fsm = ap_ST_fsm_state190;
        end
        ap_ST_fsm_state190 : begin
            ap_NS_fsm = ap_ST_fsm_state191;
        end
        ap_ST_fsm_state191 : begin
            ap_NS_fsm = ap_ST_fsm_state192;
        end
        ap_ST_fsm_state192 : begin
            ap_NS_fsm = ap_ST_fsm_state193;
        end
        ap_ST_fsm_state193 : begin
            ap_NS_fsm = ap_ST_fsm_state194;
        end
        ap_ST_fsm_state194 : begin
            ap_NS_fsm = ap_ST_fsm_state195;
        end
        ap_ST_fsm_state195 : begin
            ap_NS_fsm = ap_ST_fsm_state196;
        end
        ap_ST_fsm_state196 : begin
            ap_NS_fsm = ap_ST_fsm_state197;
        end
        ap_ST_fsm_state197 : begin
            ap_NS_fsm = ap_ST_fsm_state198;
        end
        ap_ST_fsm_state198 : begin
            ap_NS_fsm = ap_ST_fsm_state199;
        end
        ap_ST_fsm_state199 : begin
            ap_NS_fsm = ap_ST_fsm_state200;
        end
        ap_ST_fsm_state200 : begin
            ap_NS_fsm = ap_ST_fsm_state201;
        end
        ap_ST_fsm_state201 : begin
            ap_NS_fsm = ap_ST_fsm_state202;
        end
        ap_ST_fsm_state202 : begin
            ap_NS_fsm = ap_ST_fsm_state203;
        end
        ap_ST_fsm_state203 : begin
            ap_NS_fsm = ap_ST_fsm_state204;
        end
        ap_ST_fsm_state204 : begin
            ap_NS_fsm = ap_ST_fsm_state205;
        end
        ap_ST_fsm_state205 : begin
            ap_NS_fsm = ap_ST_fsm_state206;
        end
        ap_ST_fsm_state206 : begin
            ap_NS_fsm = ap_ST_fsm_state207;
        end
        ap_ST_fsm_state207 : begin
            ap_NS_fsm = ap_ST_fsm_state208;
        end
        ap_ST_fsm_state208 : begin
            ap_NS_fsm = ap_ST_fsm_state209;
        end
        ap_ST_fsm_state209 : begin
            ap_NS_fsm = ap_ST_fsm_state210;
        end
        ap_ST_fsm_state210 : begin
            ap_NS_fsm = ap_ST_fsm_state211;
        end
        ap_ST_fsm_state211 : begin
            ap_NS_fsm = ap_ST_fsm_state212;
        end
        ap_ST_fsm_state212 : begin
            ap_NS_fsm = ap_ST_fsm_state213;
        end
        ap_ST_fsm_state213 : begin
            ap_NS_fsm = ap_ST_fsm_state214;
        end
        ap_ST_fsm_state214 : begin
            ap_NS_fsm = ap_ST_fsm_state215;
        end
        ap_ST_fsm_state215 : begin
            ap_NS_fsm = ap_ST_fsm_state216;
        end
        ap_ST_fsm_state216 : begin
            ap_NS_fsm = ap_ST_fsm_state217;
        end
        ap_ST_fsm_state217 : begin
            ap_NS_fsm = ap_ST_fsm_state218;
        end
        ap_ST_fsm_state218 : begin
            ap_NS_fsm = ap_ST_fsm_state219;
        end
        ap_ST_fsm_state219 : begin
            ap_NS_fsm = ap_ST_fsm_state220;
        end
        ap_ST_fsm_state220 : begin
            ap_NS_fsm = ap_ST_fsm_state221;
        end
        ap_ST_fsm_state221 : begin
            ap_NS_fsm = ap_ST_fsm_state222;
        end
        ap_ST_fsm_state222 : begin
            ap_NS_fsm = ap_ST_fsm_state223;
        end
        ap_ST_fsm_state223 : begin
            ap_NS_fsm = ap_ST_fsm_state224;
        end
        ap_ST_fsm_state224 : begin
            ap_NS_fsm = ap_ST_fsm_state225;
        end
        ap_ST_fsm_state225 : begin
            ap_NS_fsm = ap_ST_fsm_state226;
        end
        ap_ST_fsm_state226 : begin
            ap_NS_fsm = ap_ST_fsm_state227;
        end
        ap_ST_fsm_state227 : begin
            ap_NS_fsm = ap_ST_fsm_state228;
        end
        ap_ST_fsm_state228 : begin
            ap_NS_fsm = ap_ST_fsm_state229;
        end
        ap_ST_fsm_state229 : begin
            ap_NS_fsm = ap_ST_fsm_state230;
        end
        ap_ST_fsm_state230 : begin
            ap_NS_fsm = ap_ST_fsm_state231;
        end
        ap_ST_fsm_state231 : begin
            ap_NS_fsm = ap_ST_fsm_state232;
        end
        ap_ST_fsm_state232 : begin
            ap_NS_fsm = ap_ST_fsm_state233;
        end
        ap_ST_fsm_state233 : begin
            ap_NS_fsm = ap_ST_fsm_state234;
        end
        ap_ST_fsm_state234 : begin
            ap_NS_fsm = ap_ST_fsm_state235;
        end
        ap_ST_fsm_state235 : begin
            ap_NS_fsm = ap_ST_fsm_state236;
        end
        ap_ST_fsm_state236 : begin
            ap_NS_fsm = ap_ST_fsm_state237;
        end
        ap_ST_fsm_state237 : begin
            ap_NS_fsm = ap_ST_fsm_state238;
        end
        ap_ST_fsm_state238 : begin
            ap_NS_fsm = ap_ST_fsm_state239;
        end
        ap_ST_fsm_state239 : begin
            if (((gmem2_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state239))) begin
                ap_NS_fsm = ap_ST_fsm_state169;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state239;
            end
        end
        ap_ST_fsm_state240 : begin
            if (((gmem2_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state240))) begin
                ap_NS_fsm = ap_ST_fsm_state241;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state240;
            end
        end
        ap_ST_fsm_state241 : begin
            if (((gmem2_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state241))) begin
                ap_NS_fsm = ap_ST_fsm_state242;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state241;
            end
        end
        ap_ST_fsm_state242 : begin
            ap_NS_fsm = ap_ST_fsm_state243;
        end
        ap_ST_fsm_state243 : begin
            ap_NS_fsm = ap_ST_fsm_state244;
        end
        ap_ST_fsm_state244 : begin
            ap_NS_fsm = ap_ST_fsm_state245;
        end
        ap_ST_fsm_state245 : begin
            ap_NS_fsm = ap_ST_fsm_state246;
        end
        ap_ST_fsm_state246 : begin
            ap_NS_fsm = ap_ST_fsm_state247;
        end
        ap_ST_fsm_state247 : begin
            ap_NS_fsm = ap_ST_fsm_state248;
        end
        ap_ST_fsm_state248 : begin
            ap_NS_fsm = ap_ST_fsm_state249;
        end
        ap_ST_fsm_state249 : begin
            ap_NS_fsm = ap_ST_fsm_state250;
        end
        ap_ST_fsm_state250 : begin
            ap_NS_fsm = ap_ST_fsm_state251;
        end
        ap_ST_fsm_state251 : begin
            ap_NS_fsm = ap_ST_fsm_state252;
        end
        ap_ST_fsm_state252 : begin
            ap_NS_fsm = ap_ST_fsm_state253;
        end
        ap_ST_fsm_state253 : begin
            ap_NS_fsm = ap_ST_fsm_state254;
        end
        ap_ST_fsm_state254 : begin
            ap_NS_fsm = ap_ST_fsm_state255;
        end
        ap_ST_fsm_state255 : begin
            ap_NS_fsm = ap_ST_fsm_state256;
        end
        ap_ST_fsm_state256 : begin
            ap_NS_fsm = ap_ST_fsm_state257;
        end
        ap_ST_fsm_state257 : begin
            ap_NS_fsm = ap_ST_fsm_state258;
        end
        ap_ST_fsm_state258 : begin
            ap_NS_fsm = ap_ST_fsm_state259;
        end
        ap_ST_fsm_state259 : begin
            ap_NS_fsm = ap_ST_fsm_state260;
        end
        ap_ST_fsm_state260 : begin
            ap_NS_fsm = ap_ST_fsm_state261;
        end
        ap_ST_fsm_state261 : begin
            ap_NS_fsm = ap_ST_fsm_state262;
        end
        ap_ST_fsm_state262 : begin
            ap_NS_fsm = ap_ST_fsm_state263;
        end
        ap_ST_fsm_state263 : begin
            ap_NS_fsm = ap_ST_fsm_state264;
        end
        ap_ST_fsm_state264 : begin
            ap_NS_fsm = ap_ST_fsm_state265;
        end
        ap_ST_fsm_state265 : begin
            ap_NS_fsm = ap_ST_fsm_state266;
        end
        ap_ST_fsm_state266 : begin
            ap_NS_fsm = ap_ST_fsm_state267;
        end
        ap_ST_fsm_state267 : begin
            ap_NS_fsm = ap_ST_fsm_state268;
        end
        ap_ST_fsm_state268 : begin
            ap_NS_fsm = ap_ST_fsm_state269;
        end
        ap_ST_fsm_state269 : begin
            ap_NS_fsm = ap_ST_fsm_state270;
        end
        ap_ST_fsm_state270 : begin
            ap_NS_fsm = ap_ST_fsm_state271;
        end
        ap_ST_fsm_state271 : begin
            ap_NS_fsm = ap_ST_fsm_state272;
        end
        ap_ST_fsm_state272 : begin
            ap_NS_fsm = ap_ST_fsm_state273;
        end
        ap_ST_fsm_state273 : begin
            ap_NS_fsm = ap_ST_fsm_state274;
        end
        ap_ST_fsm_state274 : begin
            ap_NS_fsm = ap_ST_fsm_state275;
        end
        ap_ST_fsm_state275 : begin
            ap_NS_fsm = ap_ST_fsm_state276;
        end
        ap_ST_fsm_state276 : begin
            ap_NS_fsm = ap_ST_fsm_state277;
        end
        ap_ST_fsm_state277 : begin
            ap_NS_fsm = ap_ST_fsm_state278;
        end
        ap_ST_fsm_state278 : begin
            ap_NS_fsm = ap_ST_fsm_state279;
        end
        ap_ST_fsm_state279 : begin
            ap_NS_fsm = ap_ST_fsm_state280;
        end
        ap_ST_fsm_state280 : begin
            ap_NS_fsm = ap_ST_fsm_state281;
        end
        ap_ST_fsm_state281 : begin
            ap_NS_fsm = ap_ST_fsm_state282;
        end
        ap_ST_fsm_state282 : begin
            ap_NS_fsm = ap_ST_fsm_state283;
        end
        ap_ST_fsm_state283 : begin
            ap_NS_fsm = ap_ST_fsm_state284;
        end
        ap_ST_fsm_state284 : begin
            ap_NS_fsm = ap_ST_fsm_state285;
        end
        ap_ST_fsm_state285 : begin
            ap_NS_fsm = ap_ST_fsm_state286;
        end
        ap_ST_fsm_state286 : begin
            ap_NS_fsm = ap_ST_fsm_state287;
        end
        ap_ST_fsm_state287 : begin
            ap_NS_fsm = ap_ST_fsm_state288;
        end
        ap_ST_fsm_state288 : begin
            ap_NS_fsm = ap_ST_fsm_state289;
        end
        ap_ST_fsm_state289 : begin
            ap_NS_fsm = ap_ST_fsm_state290;
        end
        ap_ST_fsm_state290 : begin
            ap_NS_fsm = ap_ST_fsm_state291;
        end
        ap_ST_fsm_state291 : begin
            ap_NS_fsm = ap_ST_fsm_state292;
        end
        ap_ST_fsm_state292 : begin
            ap_NS_fsm = ap_ST_fsm_state293;
        end
        ap_ST_fsm_state293 : begin
            ap_NS_fsm = ap_ST_fsm_state294;
        end
        ap_ST_fsm_state294 : begin
            ap_NS_fsm = ap_ST_fsm_state295;
        end
        ap_ST_fsm_state295 : begin
            ap_NS_fsm = ap_ST_fsm_state296;
        end
        ap_ST_fsm_state296 : begin
            ap_NS_fsm = ap_ST_fsm_state297;
        end
        ap_ST_fsm_state297 : begin
            ap_NS_fsm = ap_ST_fsm_state298;
        end
        ap_ST_fsm_state298 : begin
            ap_NS_fsm = ap_ST_fsm_state299;
        end
        ap_ST_fsm_state299 : begin
            ap_NS_fsm = ap_ST_fsm_state300;
        end
        ap_ST_fsm_state300 : begin
            ap_NS_fsm = ap_ST_fsm_state301;
        end
        ap_ST_fsm_state301 : begin
            ap_NS_fsm = ap_ST_fsm_state302;
        end
        ap_ST_fsm_state302 : begin
            ap_NS_fsm = ap_ST_fsm_state303;
        end
        ap_ST_fsm_state303 : begin
            ap_NS_fsm = ap_ST_fsm_state304;
        end
        ap_ST_fsm_state304 : begin
            ap_NS_fsm = ap_ST_fsm_state305;
        end
        ap_ST_fsm_state305 : begin
            ap_NS_fsm = ap_ST_fsm_state306;
        end
        ap_ST_fsm_state306 : begin
            ap_NS_fsm = ap_ST_fsm_state307;
        end
        ap_ST_fsm_state307 : begin
            ap_NS_fsm = ap_ST_fsm_state308;
        end
        ap_ST_fsm_state308 : begin
            ap_NS_fsm = ap_ST_fsm_state309;
        end
        ap_ST_fsm_state309 : begin
            if (((gmem2_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state309))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state309;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln113_fu_1143_p2 = ($signed(trunc_ln101_1_fu_1139_p1) + $signed(8'd255));

assign add_ln115_fu_1257_p2 = ($signed(west_fu_1249_p3) + $signed(32'd4294967295));

assign add_ln122_fu_1094_p2 = (empty_54_fu_1062_p1 + add_ln91_2_reg_1848);

assign add_ln150_fu_1210_p2 = ($signed(sext_ln101_fu_1118_p1) + $signed(zext_ln101_2_reg_1941));

assign add_ln66_fu_1330_p2 = (select_ln122_1_fu_1316_p3 + trunc_ln122_fu_1312_p1);

assign add_ln91_1_fu_962_p2 = (shl_ln91_fu_957_p2 + m);

assign add_ln91_2_fu_976_p2 = ($signed(trunc_ln91_fu_973_p1) + $signed(17'd131071));

assign add_ln91_fu_952_p0 = n;

assign add_ln91_fu_952_p2 = ($signed(add_ln91_fu_952_p0) + $signed(32'd4294967295));

assign add_ln95_1_fu_1046_p2 = (i_reg_708 + 32'd1);

assign add_ln95_2_fu_1052_p2 = ($signed(phi_mul_reg_719) + $signed(sext_ln90_reg_1793));

assign add_ln95_fu_1042_p2 = ($signed(add_ln91_reg_1830) + $signed(m));

assign add_ln98_fu_1578_p2 = (phi_mul_reg_719 + direction_matrix_read_reg_1736);

assign ap_CS_fsm_pp3_stage0 = ap_CS_fsm[32'd77];

assign ap_CS_fsm_pp4_stage0 = ap_CS_fsm[32'd150];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state152 = ap_CS_fsm[32'd149];

assign ap_CS_fsm_state156 = ap_CS_fsm[32'd151];

assign ap_CS_fsm_state157 = ap_CS_fsm[32'd152];

assign ap_CS_fsm_state158 = ap_CS_fsm[32'd153];

assign ap_CS_fsm_state159 = ap_CS_fsm[32'd154];

assign ap_CS_fsm_state160 = ap_CS_fsm[32'd155];

assign ap_CS_fsm_state161 = ap_CS_fsm[32'd156];

assign ap_CS_fsm_state162 = ap_CS_fsm[32'd157];

assign ap_CS_fsm_state163 = ap_CS_fsm[32'd158];

assign ap_CS_fsm_state164 = ap_CS_fsm[32'd159];

assign ap_CS_fsm_state165 = ap_CS_fsm[32'd160];

assign ap_CS_fsm_state166 = ap_CS_fsm[32'd161];

assign ap_CS_fsm_state167 = ap_CS_fsm[32'd162];

assign ap_CS_fsm_state168 = ap_CS_fsm[32'd163];

assign ap_CS_fsm_state169 = ap_CS_fsm[32'd164];

assign ap_CS_fsm_state170 = ap_CS_fsm[32'd165];

assign ap_CS_fsm_state171 = ap_CS_fsm[32'd166];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state239 = ap_CS_fsm[32'd234];

assign ap_CS_fsm_state240 = ap_CS_fsm[32'd235];

assign ap_CS_fsm_state241 = ap_CS_fsm[32'd236];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state309 = ap_CS_fsm[32'd304];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state77 = ap_CS_fsm[32'd76];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state81 = ap_CS_fsm[32'd78];

assign ap_CS_fsm_state82 = ap_CS_fsm[32'd79];

assign ap_CS_fsm_state83 = ap_CS_fsm[32'd80];

assign ap_block_pp3_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp3_stage0_11001 = ((gmem1_RVALID == 1'b0) & (ap_enable_reg_pp3_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp3_stage0_subdone = ((gmem1_RVALID == 1'b0) & (ap_enable_reg_pp3_iter1 == 1'b1));
end

assign ap_block_pp4_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp4_stage0_11001 = ((gmem1_RVALID == 1'b0) & (ap_enable_reg_pp4_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp4_stage0_subdone = ((gmem1_RVALID == 1'b0) & (ap_enable_reg_pp4_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (ap_start == 1'b0));
end

assign ap_block_state153_pp4_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state154_pp4_stage0_iter1 = (gmem1_RVALID == 1'b0);
end

assign ap_block_state155_pp4_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state78_pp3_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state79_pp3_stage0_iter1 = (gmem1_RVALID == 1'b0);
end

assign ap_block_state80_pp3_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state83_io = ((gmem1_ARREADY == 1'b0) & (icmp_ln91_reg_1844 == 1'd0));
end

always @ (*) begin
    ap_block_state8_io = ((gmem1_ARREADY == 1'b0) & (icmp_ln90_reg_1789 == 1'd0));
end

assign ap_enable_pp3 = (ap_idle_pp3 ^ 1'b1);

assign ap_enable_pp4 = (ap_idle_pp4 ^ 1'b1);

assign arrayidx73_sum_fu_1537_p2 = (loop_index43_cast11_fu_1528_p1 + zext_ln101_1_reg_1936);

assign arrayidx82_sum_fu_1616_p2 = (loop_index_reg_787 + zext_ln101_reg_1931);

assign current_diag_load_phi_fu_1587_p3 = ((icmp29_reg_2142[0:0] == 1'b1) ? current_diag_0_q0 : current_diag_1_q0);

assign dir_1_fu_1410_p3 = ((or_ln138_fu_1405_p2[0:0] == 1'b1) ? select_ln138_fu_1397_p3 : dir_fu_1386_p3);

assign dir_fu_1386_p3 = ((icmp_ln123_reg_2055[0:0] == 1'b1) ? 2'd2 : 2'd0);

assign direction_diag_V_load_phi_cast_fu_1684_p1 = direction_diag_V_load_phi_fu_1677_p3;

assign direction_diag_V_load_phi_fu_1677_p3 = ((icmp32_reg_2184[0:0] == 1'b1) ? direction_diag_0_V_q0 : direction_diag_1_V_q0);

assign empty_36_fu_802_p2 = (empty_reg_653 + 10'd1);

assign empty_38_fu_814_p1 = empty_reg_653[7:0];

assign empty_40_fu_840_p2 = (empty_39_reg_664 + 9'd1);

assign empty_42_fu_852_p1 = empty_39_reg_664[0:0];

assign empty_44_fu_872_p2 = (empty_43_reg_675 + 9'd1);

assign empty_46_fu_884_p1 = empty_43_reg_675[0:0];

assign empty_48_fu_918_p2 = (loop_index61_reg_686 + 64'd1);

assign empty_49_fu_943_p1 = gmem1_RDATA[2:0];

assign empty_50_fu_929_p1 = loop_index61_reg_686[0:0];

assign empty_51_fu_991_p2 = (loop_index55_reg_697 + 64'd1);

assign empty_52_fu_1016_p1 = gmem1_RDATA[2:0];

assign empty_53_fu_1002_p1 = loop_index55_reg_697[0:0];

assign empty_54_fu_1062_p1 = i_reg_708[16:0];

assign empty_55_fu_1066_p1 = i_reg_708[0:0];

assign empty_57_fu_1476_p2 = (loop_index49_reg_765 + 62'd1);

assign empty_59_fu_1487_p1 = loop_index49_reg_765[0:0];

assign empty_60_fu_1518_p2 = (loop_index43_reg_776 + 62'd1);

assign empty_61_fu_1524_p1 = loop_index43_reg_776[7:0];

assign empty_63_fu_1564_p1 = loop_index43_reg_776[0:0];

assign empty_64_fu_1601_p2 = (loop_index_reg_787 + 64'd1);

assign empty_65_fu_1612_p1 = loop_index_reg_787[7:0];

assign empty_66_fu_1643_p1 = loop_index_reg_787[1:0];

assign empty_67_fu_1647_p2 = (add_ln98_reg_2156 + loop_index_reg_787);

assign empty_68_fu_1652_p2 = (empty_73_reg_2161 + empty_66_fu_1643_p1);

assign empty_69_fu_1691_p2 = 4'd1 << p_cast18_fu_1688_p1;

assign empty_70_fu_1708_p2 = direction_diag_V_load_phi_cast_fu_1684_p1 << p_cast9_fu_1704_p1;

assign empty_73_fu_1583_p1 = add_ln98_fu_1578_p2[1:0];

assign exitcond5_fu_1482_p2 = ((loop_index49_reg_765 == mul68_cast_reg_1907) ? 1'b1 : 1'b0);

assign exitcond686_fu_1532_p2 = ((loop_index43_reg_776 == mul68_cast_reg_1907) ? 1'b1 : 1'b0);

assign exitcond7410_fu_997_p2 = ((loop_index55_reg_697 == sext_ln91_reg_1853) ? 1'b1 : 1'b0);

assign exitcond7511_fu_924_p2 = ((loop_index61_reg_686 == sext_ln90_reg_1793) ? 1'b1 : 1'b0);

assign exitcond7612_fu_878_p2 = ((empty_43_reg_675 == 9'd256) ? 1'b1 : 1'b0);

assign exitcond7713_fu_846_p2 = ((empty_39_reg_664 == 9'd256) ? 1'b1 : 1'b0);

assign exitcond7814_fu_808_p2 = ((empty_reg_653 == 10'd512) ? 1'b1 : 1'b0);

assign exitcond_fu_1607_p2 = ((loop_index_reg_787 == sext_ln90_reg_1793) ? 1'b1 : 1'b0);

assign icmp29_fu_1558_p2 = ((tmp_4_fu_1548_p4 == 55'd0) ? 1'b1 : 1'b0);

assign icmp32_fu_1637_p2 = ((tmp_5_fu_1627_p4 == 56'd0) ? 1'b1 : 1'b0);

assign icmp_fu_834_p2 = ((tmp_fu_824_p4 == 2'd0) ? 1'b1 : 1'b0);

assign icmp_ln102_fu_1134_p1 = n;

assign icmp_ln102_fu_1134_p2 = (($signed(sext_ln101_1_fu_1122_p1) < $signed(icmp_ln102_fu_1134_p1)) ? 1'b1 : 1'b0);

assign icmp_ln112_fu_1231_p2 = ((j_reg_731 == 9'd0) ? 1'b1 : 1'b0);

assign icmp_ln123_fu_1350_p2 = (($signed(test_val_reg_2039) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign icmp_ln131_fu_1366_p2 = (($signed(test_val_3_reg_2049) > $signed(zext_ln68_fu_1362_p1)) ? 1'b1 : 1'b0);

assign icmp_ln138_fu_1393_p2 = (($signed(test_val_2_reg_2033) > $signed(val_2_reg_2065)) ? 1'b1 : 1'b0);

assign icmp_ln143_fu_1428_p2 = (($signed(max_value_3_fu_1420_p3) > $signed(max_value_fu_250)) ? 1'b1 : 1'b0);

assign icmp_ln150_fu_1225_p2 = ((tmp_3_fu_1215_p4 == 2'd0) ? 1'b1 : 1'b0);

assign icmp_ln870_fu_1298_p2 = ((select_ln870_fu_1279_p3 == select_ln870_1_fu_1290_p3) ? 1'b1 : 1'b0);

assign icmp_ln90_fu_904_p0 = n;

assign icmp_ln90_fu_904_p2 = ((icmp_ln90_fu_904_p0 == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln91_fu_967_p2 = ((add_ln91_1_fu_962_p2 == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln95_fu_1057_p2 = ((i_reg_708 == add_ln95_reg_1913) ? 1'b1 : 1'b0);

assign index_2_fu_1381_p2 = ($signed(index_reg_743) + $signed(add_ln91_reg_1830));

assign j_1_fu_1470_p2 = ($signed(j_reg_731) + $signed(9'd511));

assign loop_index43_cast11_fu_1528_p1 = loop_index43_reg_776;

assign lshr_ln1_fu_1176_p4 = {{j_reg_731[7:1]}};

assign lshr_ln870_1_fu_1194_p4 = {{sub_ln122_fu_1171_p2[16:1]}};

assign lshr_ln_fu_1149_p4 = {{add_ln113_fu_1143_p2[7:1]}};

assign max_index_buf_1_fu_1434_p2 = (index_2_fu_1381_p2 - mul54_reg_1902);

assign max_index_buf_2_fu_1439_p3 = ((icmp_ln143_fu_1428_p2[0:0] == 1'b1) ? max_index_buf_1_fu_1434_p2 : max_index_buf_fu_246);

assign max_value_2_fu_1447_p3 = ((icmp_ln143_fu_1428_p2[0:0] == 1'b1) ? max_value_3_fu_1420_p3 : max_value_fu_250);

assign max_value_3_fu_1420_p3 = ((icmp_ln138_fu_1393_p2[0:0] == 1'b1) ? test_val_2_reg_2033 : val_2_reg_2065);

assign mul68_cast_fu_1039_p0 = n;

assign mul68_cast_fu_1039_p1 = mul68_cast_fu_1039_p0;

assign newIndex113_cast_fu_898_p1 = newIndex2_fu_888_p4;

assign newIndex125_fu_1621_p1 = empty_65_fu_1612_p1;

assign newIndex1_fu_856_p4 = {{empty_39_reg_664[7:1]}};

assign newIndex2_fu_888_p4 = {{empty_43_reg_675[7:1]}};

assign newIndex31_cast_fu_1020_p1 = newIndex3_reg_1877_pp4_iter1_reg;

assign newIndex45_fu_1542_p1 = empty_61_fu_1524_p1;

assign newIndex4_fu_1491_p4 = {{loop_index49_reg_765[7:1]}};

assign newIndex59_fu_818_p1 = empty_38_fu_814_p1;

assign newIndex65_cast_fu_1596_p1 = newIndex5_reg_2151;

assign newIndex71_cast_fu_1501_p1 = newIndex4_fu_1491_p4;

assign newIndex94_cast_fu_866_p1 = newIndex1_fu_856_p4;

assign newIndex_cast_fu_947_p1 = newIndex_reg_1819_pp3_iter1_reg;

assign north_fu_1336_p3 = ((trunc_ln113_fu_1237_p1[0:0] == 1'b1) ? up_diag_1_q0 : up_diag_0_q0);

assign northwest_1_fu_1271_p3 = ((icmp_ln112_fu_1231_p2[0:0] == 1'b1) ? 32'd0 : northwest_fu_1241_p3);

assign northwest_fu_1241_p3 = ((trunc_ln113_fu_1237_p1[0:0] == 1'b1) ? upper_diag_0_q0 : upper_diag_1_q0);

assign or_ln138_fu_1405_p2 = (icmp_ln138_fu_1393_p2 | icmp_ln131_reg_2060);

assign p_cast10_cast_fu_1667_p1 = $signed(p_cast_fu_1657_p4);

assign p_cast18_fu_1688_p1 = empty_68_reg_2189;

assign p_cast19_fu_1714_p1 = empty_70_reg_2206;

assign p_cast9_fu_1704_p1 = tmp_2_fu_1697_p3;

assign p_cast_fu_1657_p4 = {{empty_67_fu_1647_p2[63:2]}};

assign rem_urem_fu_1070_p3 = {{empty_55_fu_1066_p1}, {8'd0}};

assign select_ln122_1_fu_1316_p3 = ((icmp_ln870_fu_1298_p2[0:0] == 1'b1) ? 31'd2 : 31'd2147483647);

assign select_ln122_fu_1304_p3 = ((icmp_ln870_fu_1298_p2[0:0] == 1'b1) ? 32'd2 : 32'd4294967295);

assign select_ln138_fu_1397_p3 = ((icmp_ln138_fu_1393_p2[0:0] == 1'b1) ? 2'd3 : 2'd1);

assign select_ln870_1_fu_1290_p3 = ((trunc_ln870_fu_1287_p1[0:0] == 1'b1) ? string2_1_V_q0 : string2_0_V_q0);

assign select_ln870_fu_1279_p3 = ((trunc_ln113_fu_1237_p1[0:0] == 1'b1) ? string1_1_V_q0 : string1_0_V_q0);

assign sext_ln101_1_fu_1122_p1 = j_reg_731;

assign sext_ln101_fu_1118_p1 = j_reg_731;

assign sext_ln159_fu_1108_p1 = $signed(trunc_ln1_fu_1099_p4);

assign sext_ln90_fu_909_p0 = n;

assign sext_ln90_fu_909_p1 = sext_ln90_fu_909_p0;

assign sext_ln91_fu_982_p1 = add_ln91_1_reg_1838;

assign shl_ln91_fu_957_p2 = add_ln91_reg_1830 << 32'd1;

assign sub_ln122_fu_1171_p2 = (add_ln122_reg_1951 - zext_ln101_3_fu_1167_p1);

assign test_val_2_fu_1263_p3 = ((icmp_ln112_fu_1231_p2[0:0] == 1'b1) ? 32'd4294967295 : add_ln115_fu_1257_p2);

assign test_val_3_fu_1344_p2 = ($signed(north_fu_1336_p3) + $signed(32'd4294967295));

assign test_val_fu_1324_p2 = (select_ln122_fu_1304_p3 + northwest_1_fu_1271_p3);

assign tmp_1_fu_1126_p3 = j_reg_731[32'd8];

assign tmp_2_fu_1697_p3 = {{empty_68_reg_2189}, {3'd0}};

assign tmp_3_fu_1215_p4 = {{add_ln150_fu_1210_p2[9:8]}};

assign tmp_4_fu_1548_p4 = {{arrayidx73_sum_fu_1537_p2[62:8]}};

assign tmp_5_fu_1627_p4 = {{arrayidx82_sum_fu_1616_p2[63:8]}};

assign tmp_fu_824_p4 = {{empty_reg_653[9:8]}};

assign trunc_ln101_1_fu_1139_p1 = j_reg_731[7:0];

assign trunc_ln101_fu_1090_p1 = phi_mul_reg_719[31:0];

assign trunc_ln113_fu_1237_p1 = j_reg_731[0:0];

assign trunc_ln122_fu_1312_p1 = northwest_1_fu_1271_p3[30:0];

assign trunc_ln1_fu_1099_p4 = {{max_index_read_reg_1741[63:2]}};

assign trunc_ln870_fu_1287_p1 = sub_ln122_reg_1994[0:0];

assign trunc_ln91_fu_973_p0 = n;

assign trunc_ln91_fu_973_p1 = trunc_ln91_fu_973_p0[16:0];

assign up_diag_0_address1 = zext_ln113_fu_1159_p1;

assign up_diag_1_address1 = zext_ln113_fu_1159_p1;

assign up_diag_load_phi_fu_1509_p3 = ((empty_59_reg_2099[0:0] == 1'b1) ? up_diag_1_q0 : up_diag_0_q0);

assign val_2_fu_1371_p3 = ((icmp_ln131_fu_1366_p2[0:0] == 1'b1) ? test_val_3_reg_2049 : zext_ln68_fu_1362_p1);

assign val_fu_1355_p3 = ((icmp_ln123_fu_1350_p2[0:0] == 1'b1) ? add_ln66_reg_2044 : 31'd0);

assign west_fu_1249_p3 = ((trunc_ln113_fu_1237_p1[0:0] == 1'b1) ? up_diag_0_q1 : up_diag_1_q1);

assign zext_ln101_1_fu_1082_p1 = rem_urem_fu_1070_p3;

assign zext_ln101_2_fu_1086_p1 = rem_urem_fu_1070_p3;

assign zext_ln101_3_fu_1167_p1 = $unsigned(j_reg_731);

assign zext_ln101_fu_1078_p1 = rem_urem_fu_1070_p3;

assign zext_ln113_fu_1159_p1 = lshr_ln_fu_1149_p4;

assign zext_ln150_fu_1455_p1 = trunc_ln101_1_reg_1969;

assign zext_ln68_fu_1362_p1 = val_fu_1355_p3;

assign zext_ln870_1_fu_1186_p1 = lshr_ln1_fu_1176_p4;

assign zext_ln870_fu_1204_p1 = lshr_ln870_1_fu_1194_p4;

always @ (posedge ap_clk) begin
    zext_ln101_reg_1931[7:0] <= 8'b00000000;
    zext_ln101_reg_1931[63:9] <= 55'b0000000000000000000000000000000000000000000000000000000;
    zext_ln101_1_reg_1936[7:0] <= 8'b00000000;
    zext_ln101_1_reg_1936[62:9] <= 54'b000000000000000000000000000000000000000000000000000000;
    zext_ln101_2_reg_1941[7:0] <= 8'b00000000;
    zext_ln101_2_reg_1941[9] <= 1'b0;
end

endmodule //compute_matrices
