#include "xil_printf.h"
#include "timer_util.h"
#include <sleep.h>
#include <stdlib.h>

#define ROWS 700-1 // number of rows in Matrix-1
#define COLS 700-1 // number of columns in Matrix-1

int m1[ROWS][COLS];
int m2[ROWS][COLS];
int result [ROWS][COLS];

void multi_Matrix(int m1[][COLS], int m2[][COLS]);
void multi_Matrix_optimize (int m1[][COLS], int m2[][COLS]);
void add_matrix (int m1[][COLS/2], int m2[][cols/2]);
void multi_Matrix_optimize (int m1[][COLS], int m2[][COLS]);

int main (void)
{
	xil_printf("\r\nCreating arrays\r\n");

    // Fill the arrays with random values
    for (int i = 0; i < ROWS; i++) {
        for (int j = 0; j < COLS; j++) {
            m1[i][j] = rand();
            m2[i][j] = rand();
        }
    }

	xil_printf("***Starting Slow***\r\n");

//Slow Multiplication.
	start_time();

    // Function call
	multi_Matrix(m1, m2);

	stop_time();
	CORE_TICKS total_time = get_time();
	secs_ret secs_passed_slow = time_in_secs(total_time);

	xil_printf("***Starting Optimized***\r\n");

//Optimized Multiplication.
	start_time();

    // Function call
	multi_Matrix(m1, m2);

	stop_time();
	total_time = get_time();
	secs_ret secs_passed_optimized = time_in_secs(total_time);

	xil_printf("Results:\r\n");
	xil_printf("Slow\r\nTime Passed: %d\r\n", secs_passed_slow);
	xil_printf("Optimized\r\nTime Passed: %d\r\n", secs_passed_optimized);

	xil_printf("Finished!\r\n");

  return 0;
}

void multi_Matrix(int m1[][COLS], int m2[][COLS]) {

    for (int i = 0; i < ROWS; i++) {
    	//xil_printf("Row: %d\r\n", i);
        for (int j = 0; j < COLS; j++) {
            result[i][j] = 0;

            for (int k = 0; k < ROWS; k++) {
                result[i][j] += m1[i][k] * m2[k][j];
            }
        }
    }
}

void multi_Matrix_optimize (int m1[][COLS], int m2[][COLS]) {
	int m2_transformed[ROWS][COLS];

	for(int i = 0; i < ROWS; i++) {
		for (int j = 0; j < COLS; j++) {
			m2_transformed[j][i] = m2[i][j];
		}
	}

	multi_Matrix(m1, m2_transformed);
}

void add_matrix (int m1[][COLS/2], int m2[][cols/2]) {
	int m_result[ROWS/2][COLS/2];

	for (int i; i < ROWS/2; i++) {
		for (int j; j < COLS/2; j++) {
			m_result[i][j] = m1[i][j] + m1[i][j];
		}
	}
}

void sub_matrix (int m1[][COLS/2], int m2[][cols/2]) {
	int m_result[ROWS/2][COLS/2];

	for (int i; i < ROWS/2; i++) {
		for (int j; j < COLS/2; j++) {
			m_result[i][j] = m1[i][j] - m1[i][j];
		}
	}
}
